
test04-Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000002de  00000372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800118  00800118  0000038a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b61  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097f  00000000  00000000  00000fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083c  00000000  00000000  00001938  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00002174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007653  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000289  00000000  00000000  0000988f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00009b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002b80  00000000  00000000  00009b58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	78 c0       	rjmp	.+240    	; 0x12a <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ed       	ldi	r30, 0xDE	; 222
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 32       	cpi	r26, 0x21	; 33
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	0a c1       	rjmp	.+532    	; 0x2da <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
unsigned long cnt = 0, tcnt = 0;

int main(void)
{
	/*Replace with your application code*/
	SegPort(&PORTD, &PORTC);
  c8:	65 e3       	ldi	r22, 0x35	; 53
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	82 e3       	ldi	r24, 0x32	; 50
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	51 d0       	rcall	.+162    	; 0x174 <SegPort>
	DDRD = 0xFF;// 세그먼트 제어 핀 8개를 출ㄺ으로 설정
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
  d6:	8f e0       	ldi	r24, 0x0F	; 15
  d8:	84 bb       	out	0x14, r24	; 20
	
    //TIMSK |= 0x01; // 0000 0001b - Timer 0 TCNT overflow Interrupt
	TIMSK |= 0x04; // 0000 0001b - Timer 1 TCNT overflow Interrupt
  da:	87 b7       	in	r24, 0x37	; 55
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	87 bf       	out	0x37, r24	; 55
	//TIMSK |= 0x40; // 0000 0001b - Timer 2 TCNT overflow Interrupt
	
	TCCR0 = 0x04; // 분주비 (Pre - Scaler) 64
  e0:	84 e0       	ldi	r24, 0x04	; 4
  e2:	83 bf       	out	0x33, r24	; 51
	TCCR1B = 0x04;// 분주비 (Pre - Scaler) 64
  e4:	8e bd       	out	0x2e, r24	; 46
	//TCCR2 = 0x04; // 분주비 (Pre - Scaler) 64
	SREG |= 0x80;
  e6:	8f b7       	in	r24, 0x3f	; 63
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	8f bf       	out	0x3f, r24	; 63
	sei();
  ec:	78 94       	sei
    while (1) 
    {
		if (cnt >= 0x10000) cnt = 0;
  ee:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
  f2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
  f6:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_end+0x2>
  fa:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_end+0x3>
  fe:	00 97       	sbiw	r24, 0x00	; 0
 100:	a1 40       	sbci	r26, 0x01	; 1
 102:	b1 05       	cpc	r27, r1
 104:	40 f0       	brcs	.+16     	; 0x116 <main+0x4e>
 106:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 10a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
 10e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end+0x2>
 112:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x3>
		Disp(cnt);
 116:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
 11a:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <__data_end+0x1>
 11e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 122:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x3>
 126:	76 d0       	rcall	.+236    	; 0x214 <Disp>
	}
 128:	e2 cf       	rjmp	.-60     	; 0xee <main+0x26>

0000012a <__vector_14>:
			cnt++, tcnt = 0;
		}
	}
*/
	ISR(TIMER1_OVF_vect)
	{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
		cnt++;
 13c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 140:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 144:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_end+0x2>
 148:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_end+0x3>
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	a1 1d       	adc	r26, r1
 150:	b1 1d       	adc	r27, r1
 152:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 156:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 15a:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 15e:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
	}
 162:	bf 91       	pop	r27
 164:	af 91       	pop	r26
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <SegPort>:
char *PA = &PORTD, *PB = &PORTC; 
int sm = 4;

void SegPort(char *p1, char *p2)
{
	PA = p1; PB = p2;
 174:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <PA+0x1>
 178:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PA>
 17c:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <PB+0x1>
 180:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <PB>
 184:	08 95       	ret

00000186 <seg>:
}
void seg(int sel, uint8_t c)
{

	*PB |= 0x0F;
 186:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PB>
 18a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PB+0x1>
 18e:	20 81       	ld	r18, Z
 190:	2f 60       	ori	r18, 0x0F	; 15
 192:	20 83       	st	Z, r18
	*PB &= ~(1<<(3-sel));
 194:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PB>
 198:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PB+0x1>
 19c:	23 e0       	ldi	r18, 0x03	; 3
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	28 1b       	sub	r18, r24
 1a2:	39 0b       	sbc	r19, r25
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <seg+0x28>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	2a 95       	dec	r18
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <seg+0x24>
 1b2:	80 95       	com	r24
 1b4:	90 81       	ld	r25, Z
 1b6:	89 23       	and	r24, r25
 1b8:	80 83       	st	Z, r24
	*PA = c;	//숫자 데이터 출력
 1ba:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PA>
 1be:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PA+0x1>
 1c2:	60 83       	st	Z, r22
 1c4:	08 95       	ret

000001c6 <FND_4>:
	//__delay_us(1); //0.01초 간격으로 전환
}

void FND_4(char *inf) // segment Image 배열
{
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
	int i;
	for(int i = 0; i< sm ; i++)
 1ce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d6:	12 16       	cp	r1, r18
 1d8:	13 06       	cpc	r1, r19
 1da:	bc f4       	brge	.+46     	; 0x20a <FND_4+0x44>
 1dc:	08 2f       	mov	r16, r24
 1de:	19 2f       	mov	r17, r25
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		seg(i, *(inf+i));
 1e4:	f8 01       	movw	r30, r16
 1e6:	61 91       	ld	r22, Z+
 1e8:	8f 01       	movw	r16, r30
 1ea:	ce 01       	movw	r24, r28
 1ec:	cc df       	rcall	.-104    	; 0x186 <seg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	8f e1       	ldi	r24, 0x1F	; 31
 1f0:	9e e4       	ldi	r25, 0x4E	; 78
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <FND_4+0x2c>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <FND_4+0x32>
 1f8:	00 00       	nop
}

void FND_4(char *inf) // segment Image 배열
{
	int i;
	for(int i = 0; i< sm ; i++)
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 200:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 204:	c8 17       	cp	r28, r24
 206:	d9 07       	cpc	r29, r25
 208:	6c f3       	brlt	.-38     	; 0x1e4 <FND_4+0x1e>
	{
		seg(i, *(inf+i));
		_delay_ms(5);
	}

}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	08 95       	ret

00000214 <Disp>:

char* Disp(unsigned long num)// 16진수 문자열 : 56506 ==> 0xDCBA
{							//	4digit 16진수 segment 출력
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
	num %= 65536;							//16비트 세그문트 이미지 배열
 218:	8b 01       	movw	r16, r22
 21a:	9c 01       	movw	r18, r24
 21c:	22 27       	eor	r18, r18
 21e:	33 27       	eor	r19, r19
	int n1 = num% 16;			//A (10)		:문자가 아닌 숫자
	int n2 = (num/16)%16;		//B (11)		
	int n3 = (num/256)%16;		//C (12)
	int n4 = (num/4096);		//D (13)	
	arr[0] = digit[n1];
 220:	ec e1       	ldi	r30, 0x1C	; 28
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	6f 70       	andi	r22, 0x0F	; 15
 226:	77 27       	eor	r23, r23
 228:	db 01       	movw	r26, r22
 22a:	aa 5f       	subi	r26, 0xFA	; 250
 22c:	be 4f       	sbci	r27, 0xFE	; 254
 22e:	8c 91       	ld	r24, X
 230:	80 83       	st	Z, r24
	arr[1] = digit[n2];
 232:	d9 01       	movw	r26, r18
 234:	c8 01       	movw	r24, r16
 236:	68 94       	set
 238:	13 f8       	bld	r1, 3
 23a:	b6 95       	lsr	r27
 23c:	a7 95       	ror	r26
 23e:	97 95       	ror	r25
 240:	87 95       	ror	r24
 242:	16 94       	lsr	r1
 244:	d1 f7       	brne	.-12     	; 0x23a <Disp+0x26>
 246:	8f 70       	andi	r24, 0x0F	; 15
 248:	99 27       	eor	r25, r25
 24a:	dc 01       	movw	r26, r24
 24c:	aa 5f       	subi	r26, 0xFA	; 250
 24e:	be 4f       	sbci	r27, 0xFE	; 254
 250:	8c 91       	ld	r24, X
 252:	81 83       	std	Z+1, r24	; 0x01
	arr[2] = digit[n3];
 254:	bb 27       	eor	r27, r27
 256:	a3 2f       	mov	r26, r19
 258:	92 2f       	mov	r25, r18
 25a:	81 2f       	mov	r24, r17
 25c:	8f 70       	andi	r24, 0x0F	; 15
 25e:	99 27       	eor	r25, r25
 260:	dc 01       	movw	r26, r24
 262:	aa 5f       	subi	r26, 0xFA	; 250
 264:	be 4f       	sbci	r27, 0xFE	; 254
 266:	8c 91       	ld	r24, X
 268:	82 83       	std	Z+2, r24	; 0x02
	arr[3] = digit[n4];
 26a:	d9 01       	movw	r26, r18
 26c:	c8 01       	movw	r24, r16
 26e:	07 2e       	mov	r0, r23
 270:	7c e0       	ldi	r23, 0x0C	; 12
 272:	b6 95       	lsr	r27
 274:	a7 95       	ror	r26
 276:	97 95       	ror	r25
 278:	87 95       	ror	r24
 27a:	7a 95       	dec	r23
 27c:	d1 f7       	brne	.-12     	; 0x272 <Disp+0x5e>
 27e:	70 2d       	mov	r23, r0
 280:	dc 01       	movw	r26, r24
 282:	aa 5f       	subi	r26, 0xFA	; 250
 284:	be 4f       	sbci	r27, 0xFE	; 254
 286:	8c 91       	ld	r24, X
 288:	83 83       	std	Z+3, r24	; 0x03
	sm = (num > 4095) ? 4 : (num > 256) ? 3 : (num > 16) ? 2 : 1;
 28a:	01 15       	cp	r16, r1
 28c:	80 e1       	ldi	r24, 0x10	; 16
 28e:	18 07       	cpc	r17, r24
 290:	21 05       	cpc	r18, r1
 292:	31 05       	cpc	r19, r1
 294:	70 f4       	brcc	.+28     	; 0x2b2 <Disp+0x9e>
 296:	01 30       	cpi	r16, 0x01	; 1
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	18 07       	cpc	r17, r24
 29c:	21 05       	cpc	r18, r1
 29e:	31 05       	cpc	r19, r1
 2a0:	58 f4       	brcc	.+22     	; 0x2b8 <Disp+0xa4>
 2a2:	01 31       	cpi	r16, 0x11	; 17
 2a4:	11 05       	cpc	r17, r1
 2a6:	21 05       	cpc	r18, r1
 2a8:	31 05       	cpc	r19, r1
 2aa:	48 f4       	brcc	.+18     	; 0x2be <Disp+0xaa>
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <Disp+0xae>
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <Disp+0xae>
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <Disp+0xae>
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	FND_4(arr); 
 2ca:	8c e1       	ldi	r24, 0x1C	; 28
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	7b df       	rcall	.-266    	; 0x1c6 <FND_4>
	return arr;
}
 2d0:	8c e1       	ldi	r24, 0x1C	; 28
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	08 95       	ret

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
