
tset02-7seg2-pf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000268  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800112  00800112  0000030e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b43  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000916  00000000  00000000  00000eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c8  00000000  00000000  00001815  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a0  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e6       	ldi	r30, 0x68	; 104
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	be d0       	rcall	.+380    	; 0x240 <main>
  c4:	cf c0       	rjmp	.+414    	; 0x264 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <seg>:
//LED(PORTD,0);

void seg(int sel, uint8_t c)
{
	int i = 0;
	PORTE |= 0x0f;
  c8:	93 b1       	in	r25, 0x03	; 3
  ca:	9f 60       	ori	r25, 0x0F	; 15
  cc:	93 b9       	out	0x03, r25	; 3
	//PORTE &= ~(1<<(3-sel));
	PORTE &= ~(1<<sel);
  ce:	93 b1       	in	r25, 0x03	; 3
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <seg+0x12>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <seg+0xe>
  de:	20 95       	com	r18
  e0:	29 23       	and	r18, r25
  e2:	23 b9       	out	0x03, r18	; 3
	PORTD = c;
  e4:	62 bb       	out	0x12, r22	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	81 ee       	ldi	r24, 0xE1	; 225
  ea:	94 e0       	ldi	r25, 0x04	; 4
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <seg+0x24>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <seg+0x2e>
  f6:	00 00       	nop
	_delay_ms(100);
	PORTE |= 0x0f;
  f8:	83 b1       	in	r24, 0x03	; 3
  fa:	8f 60       	ori	r24, 0x0F	; 15
  fc:	83 b9       	out	0x03, r24	; 3
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	81 ee       	ldi	r24, 0xE1	; 225
 102:	94 e0       	ldi	r25, 0x04	; 4
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <seg+0x3c>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <seg+0x46>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <FND_4>:
	_delay_ms(100);
	
}

void FND_4(char *inf) // segment Image 배열
{
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	8c 01       	movw	r16, r24
	for(int i = 0; i< 4 ; i++)
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	07 c0       	rjmp	.+14     	; 0x130 <FND_4+0x1e>
	{
		seg(i, *(inf+i));
 122:	f8 01       	movw	r30, r16
 124:	ec 0f       	add	r30, r28
 126:	fd 1f       	adc	r31, r29
 128:	60 81       	ld	r22, Z
 12a:	ce 01       	movw	r24, r28
 12c:	cd df       	rcall	.-102    	; 0xc8 <seg>
	
}

void FND_4(char *inf) // segment Image 배열
{
	for(int i = 0; i< 4 ; i++)
 12e:	21 96       	adiw	r28, 0x01	; 1
 130:	c4 30       	cpi	r28, 0x04	; 4
 132:	d1 05       	cpc	r29, r1
 134:	b4 f3       	brlt	.-20     	; 0x122 <FND_4+0x10>
	{
		seg(i, *(inf+i));
	}
	
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <Trans>:
//문자열 고려서 안전영역 고려
//정적변수 영역에 부여
char* Trans(int num)//10진수 정수 ==> 16진수 문자열로 변환 : 65535 ==> 0xFFFF, 56506 ==> 0xDCBA
{								//16비트 세그문트 이미지 배열
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
	int n1 = num%0x10;			//A 1		:문자가 아닌 숫자
 144:	bc 01       	movw	r22, r24
 146:	6f 70       	andi	r22, 0x0F	; 15
 148:	70 78       	andi	r23, 0x80	; 128
 14a:	77 23       	and	r23, r23
 14c:	34 f4       	brge	.+12     	; 0x15a <Trans+0x1a>
 14e:	61 50       	subi	r22, 0x01	; 1
 150:	71 09       	sbc	r23, r1
 152:	60 6f       	ori	r22, 0xF0	; 240
 154:	7f 6f       	ori	r23, 0xFF	; 255
 156:	6f 5f       	subi	r22, 0xFF	; 255
 158:	7f 4f       	sbci	r23, 0xFF	; 255
	int n2 = (num/0x10)%16;		//B 16		:
 15a:	9c 01       	movw	r18, r24
 15c:	99 23       	and	r25, r25
 15e:	14 f4       	brge	.+4      	; 0x164 <Trans+0x24>
 160:	21 5f       	subi	r18, 0xF1	; 241
 162:	3f 4f       	sbci	r19, 0xFF	; 255
 164:	35 95       	asr	r19
 166:	27 95       	ror	r18
 168:	35 95       	asr	r19
 16a:	27 95       	ror	r18
 16c:	35 95       	asr	r19
 16e:	27 95       	ror	r18
 170:	35 95       	asr	r19
 172:	27 95       	ror	r18
 174:	2f 70       	andi	r18, 0x0F	; 15
 176:	30 78       	andi	r19, 0x80	; 128
 178:	33 23       	and	r19, r19
 17a:	34 f4       	brge	.+12     	; 0x188 <Trans+0x48>
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	31 09       	sbc	r19, r1
 180:	20 6f       	ori	r18, 0xF0	; 240
 182:	3f 6f       	ori	r19, 0xFF	; 255
 184:	2f 5f       	subi	r18, 0xFF	; 255
 186:	3f 4f       	sbci	r19, 0xFF	; 255
	int n3 = (num/0x100)%16;	//C 256
 188:	fc 01       	movw	r30, r24
 18a:	99 23       	and	r25, r25
 18c:	14 f4       	brge	.+4      	; 0x192 <Trans+0x52>
 18e:	e1 50       	subi	r30, 0x01	; 1
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	4f 2f       	mov	r20, r31
 194:	5f 2f       	mov	r21, r31
 196:	55 0f       	add	r21, r21
 198:	55 0b       	sbc	r21, r21
 19a:	4f 70       	andi	r20, 0x0F	; 15
 19c:	50 78       	andi	r21, 0x80	; 128
 19e:	55 23       	and	r21, r21
 1a0:	34 f4       	brge	.+12     	; 0x1ae <Trans+0x6e>
 1a2:	41 50       	subi	r20, 0x01	; 1
 1a4:	51 09       	sbc	r21, r1
 1a6:	40 6f       	ori	r20, 0xF0	; 240
 1a8:	5f 6f       	ori	r21, 0xFF	; 255
 1aa:	4f 5f       	subi	r20, 0xFF	; 255
 1ac:	5f 4f       	sbci	r21, 0xFF	; 255
	int n4 = num/0x1000;		//D 4096	
 1ae:	dc 01       	movw	r26, r24
 1b0:	99 23       	and	r25, r25
 1b2:	14 f4       	brge	.+4      	; 0x1b8 <Trans+0x78>
 1b4:	a1 50       	subi	r26, 0x01	; 1
 1b6:	b0 4f       	sbci	r27, 0xF0	; 240
 1b8:	eb 2f       	mov	r30, r27
 1ba:	e5 95       	asr	r30
 1bc:	e5 95       	asr	r30
 1be:	e5 95       	asr	r30
 1c0:	e5 95       	asr	r30
 1c2:	fb 2f       	mov	r31, r27
 1c4:	ff 0f       	add	r31, r31
 1c6:	ff 0b       	sbc	r31, r31
	if(!(num/0x1000))
 1c8:	dc 01       	movw	r26, r24
 1ca:	a1 50       	subi	r26, 0x01	; 1
 1cc:	b0 4f       	sbci	r27, 0xF0	; 240
 1ce:	af 3f       	cpi	r26, 0xFF	; 255
 1d0:	bf 41       	sbci	r27, 0x1F	; 31
 1d2:	b8 f4       	brcc	.+46     	; 0x202 <Trans+0xc2>
	{
		n4=17;
		if(!(num/0x100))
 1d4:	fc 01       	movw	r30, r24
 1d6:	e1 50       	subi	r30, 0x01	; 1
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	ef 3f       	cpi	r30, 0xFF	; 255
 1dc:	f1 40       	sbci	r31, 0x01	; 1
 1de:	40 f4       	brcc	.+16     	; 0x1f0 <Trans+0xb0>
		{
			n3=17;
			if(!(num/0x10))n2=17;
 1e0:	0f 96       	adiw	r24, 0x0f	; 15
 1e2:	4f 97       	sbiw	r24, 0x1f	; 31
 1e4:	40 f0       	brcs	.+16     	; 0x1f6 <Trans+0xb6>
	int n2 = (num/0x10)%16;		//B 16		:
	int n3 = (num/0x100)%16;	//C 256
	int n4 = num/0x1000;		//D 4096	
	if(!(num/0x1000))
	{
		n4=17;
 1e6:	e1 e1       	ldi	r30, 0x11	; 17
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(num/0x100))
		{
			n3=17;
 1ea:	41 e1       	ldi	r20, 0x11	; 17
 1ec:	50 e0       	ldi	r21, 0x00	; 0
 1ee:	09 c0       	rjmp	.+18     	; 0x202 <Trans+0xc2>
	int n2 = (num/0x10)%16;		//B 16		:
	int n3 = (num/0x100)%16;	//C 256
	int n4 = num/0x1000;		//D 4096	
	if(!(num/0x1000))
	{
		n4=17;
 1f0:	e1 e1       	ldi	r30, 0x11	; 17
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	06 c0       	rjmp	.+12     	; 0x202 <Trans+0xc2>
 1f6:	e1 e1       	ldi	r30, 0x11	; 17
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(num/0x100))
		{
			n3=17;
 1fa:	41 e1       	ldi	r20, 0x11	; 17
 1fc:	50 e0       	ldi	r21, 0x00	; 0
			if(!(num/0x10))n2=17;
 1fe:	21 e1       	ldi	r18, 0x11	; 17
 200:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	arr[0] = digit[n1];//char 1byte cast() LED문자로 표현
 202:	db 01       	movw	r26, r22
 204:	a0 50       	subi	r26, 0x00	; 0
 206:	bf 4f       	sbci	r27, 0xFF	; 255
 208:	8c 91       	ld	r24, X
 20a:	a2 e1       	ldi	r26, 0x12	; 18
 20c:	b1 e0       	ldi	r27, 0x01	; 1
 20e:	8c 93       	st	X, r24
	arr[1] = digit[n2];
 210:	e9 01       	movw	r28, r18
 212:	c0 50       	subi	r28, 0x00	; 0
 214:	df 4f       	sbci	r29, 0xFF	; 255
 216:	88 81       	ld	r24, Y
 218:	11 96       	adiw	r26, 0x01	; 1
 21a:	8c 93       	st	X, r24
 21c:	11 97       	sbiw	r26, 0x01	; 1
	arr[2] = digit[n3];
 21e:	ea 01       	movw	r28, r20
 220:	c0 50       	subi	r28, 0x00	; 0
 222:	df 4f       	sbci	r29, 0xFF	; 255
 224:	88 81       	ld	r24, Y
 226:	12 96       	adiw	r26, 0x02	; 2
 228:	8c 93       	st	X, r24
 22a:	12 97       	sbiw	r26, 0x02	; 2
	arr[3] = digit[n4];
 22c:	e0 50       	subi	r30, 0x00	; 0
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	80 81       	ld	r24, Z
 232:	13 96       	adiw	r26, 0x03	; 3
 234:	8c 93       	st	X, r24
 236:	13 97       	sbiw	r26, 0x03	; 3
	//* 실수 연산 여러 클럭 사용
	//'/' 연산 여러 클럭 사용
	//FND_4(arr);
	return arr;
	
}
 238:	cd 01       	movw	r24, r26
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <main>:
int main(void)
{
	
	int i,j=0;
    //DDRD = 0x07;
	DDRD = 0xff;
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x0f;
 244:	8f e0       	ldi	r24, 0x0F	; 15
 246:	82 b9       	out	0x02, r24	; 2


int main(void)
{
	
	int i,j=0;
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
    //DDRD = 0x07;
	DDRD = 0xff;
	DDRE = 0x0f;
    while (1) 
    {
		FND_4(Trans(j++));
 24c:	ec 01       	movw	r28, r24
 24e:	21 96       	adiw	r28, 0x01	; 1
 250:	77 df       	rcall	.-274    	; 0x140 <Trans>
 252:	5f df       	rcall	.-322    	; 0x112 <FND_4>
 254:	8f e9       	ldi	r24, 0x9F	; 159
 256:	9f e0       	ldi	r25, 0x0F	; 15
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0x18>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x1e>
 25e:	00 00       	nop
 260:	ce 01       	movw	r24, r28
 262:	f4 cf       	rjmp	.-24     	; 0x24c <main+0xc>

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
