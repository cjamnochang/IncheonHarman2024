
tset03-intr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002d8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800112  00800112  0000037e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b3e  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e6  00000000  00000000  00000f82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000446  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045a  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041a  00000000  00000000  000021f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__vector_5>
  16:	00 00       	nop
  18:	78 c0       	rjmp	.+240    	; 0x10a <__vector_6>
  1a:	00 00       	nop
  1c:	97 c0       	rjmp	.+302    	; 0x14c <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 31       	cpi	r26, 0x1B	; 27
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e4 d0       	rcall	.+456    	; 0x28c <main>
  c4:	07 c1       	rjmp	.+526    	; 0x2d4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_5>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
  da:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
  e4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
  e8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
  ec:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
  f0:	03 97       	sbiw	r24, 0x03	; 3
  f2:	24 f0       	brlt	.+8      	; 0xfc <__vector_5+0x34>
  f4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <opmode+0x1>
  f8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opmode>
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <__vector_6>:
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 11c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 126:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 12a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 12e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 132:	03 97       	sbiw	r24, 0x03	; 3
 134:	24 f0       	brlt	.+8      	; 0x13e <__vector_6+0x34>
 136:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 13a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_7>:
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <seg>:
//LED(PORTD,0);

void seg(int sel, uint8_t c)
{
	int i = 0;
	PORTC |= 0x0f;
 160:	25 b3       	in	r18, 0x15	; 21
 162:	2f 60       	ori	r18, 0x0F	; 15
 164:	25 bb       	out	0x15, r18	; 21
	PORTC &= ~(1<<(3-sel));
 166:	25 b3       	in	r18, 0x15	; 21
 168:	43 e0       	ldi	r20, 0x03	; 3
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	48 1b       	sub	r20, r24
 16e:	59 0b       	sbc	r21, r25
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <seg+0x1a>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	4a 95       	dec	r20
 17c:	e2 f7       	brpl	.-8      	; 0x176 <seg+0x16>
 17e:	80 95       	com	r24
 180:	82 23       	and	r24, r18
 182:	85 bb       	out	0x15, r24	; 21
	//PORTC &= ~(1<<sel);
	PORTD = c;
 184:	62 bb       	out	0x12, r22	; 18
 186:	8f e1       	ldi	r24, 0x1F	; 31
 188:	9e e4       	ldi	r25, 0x4E	; 78
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <seg+0x2a>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <seg+0x30>
 190:	00 00       	nop
 192:	08 95       	ret

00000194 <FND_4>:
	_delay_ms(5);
}

void FND_4(char *inf) // segment Image 배열
{
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	8c 01       	movw	r16, r24
	for(int i = 0; i< 4 ; i++)
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <FND_4+0x1e>
	{
		seg(i, *(inf+i));
 1a4:	f8 01       	movw	r30, r16
 1a6:	ec 0f       	add	r30, r28
 1a8:	fd 1f       	adc	r31, r29
 1aa:	60 81       	ld	r22, Z
 1ac:	ce 01       	movw	r24, r28
 1ae:	d8 df       	rcall	.-80     	; 0x160 <seg>
	_delay_ms(5);
}

void FND_4(char *inf) // segment Image 배열
{
	for(int i = 0; i< 4 ; i++)
 1b0:	21 96       	adiw	r28, 0x01	; 1
 1b2:	c4 30       	cpi	r28, 0x04	; 4
 1b4:	d1 05       	cpc	r29, r1
 1b6:	b4 f3       	brlt	.-20     	; 0x1a4 <FND_4+0x10>
	{
		seg(i, *(inf+i));
	}
	
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

000001c2 <Disp>:
//문자열 고려서 안전영역 고려
//정적변수 영역에 부여
char* Disp(unsigned long num)//10진수 정수 ==> 16진수 문자열로 변환 : 65535 ==> 0xFFFF, 56506 ==> 0xDCBA
{								//16비트 세그문트 이미지 배열
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
	int n1 = num%0x10;			//A 1		:문자가 아닌 숫자
 1c8:	db 01       	movw	r26, r22
 1ca:	af 70       	andi	r26, 0x0F	; 15
 1cc:	bb 27       	eor	r27, r27
	int n2 = (num/0x10)%16;		//B 16		:
 1ce:	8b 01       	movw	r16, r22
 1d0:	9c 01       	movw	r18, r24
 1d2:	68 94       	set
 1d4:	13 f8       	bld	r1, 3
 1d6:	36 95       	lsr	r19
 1d8:	27 95       	ror	r18
 1da:	17 95       	ror	r17
 1dc:	07 95       	ror	r16
 1de:	16 94       	lsr	r1
 1e0:	d1 f7       	brne	.-12     	; 0x1d6 <Disp+0x14>
 1e2:	f8 01       	movw	r30, r16
 1e4:	ef 70       	andi	r30, 0x0F	; 15
 1e6:	ff 27       	eor	r31, r31
	int n3 = (num/0x100)%16;	//C 256
 1e8:	07 2f       	mov	r16, r23
 1ea:	18 2f       	mov	r17, r24
 1ec:	29 2f       	mov	r18, r25
 1ee:	33 27       	eor	r19, r19
 1f0:	a8 01       	movw	r20, r16
 1f2:	4f 70       	andi	r20, 0x0F	; 15
 1f4:	55 27       	eor	r21, r21
	int n4 = num/0x1000;		//D 4096	
 1f6:	8b 01       	movw	r16, r22
 1f8:	9c 01       	movw	r18, r24
 1fa:	0f 2e       	mov	r0, r31
 1fc:	fc e0       	ldi	r31, 0x0C	; 12
 1fe:	36 95       	lsr	r19
 200:	27 95       	ror	r18
 202:	17 95       	ror	r17
 204:	07 95       	ror	r16
 206:	fa 95       	dec	r31
 208:	d1 f7       	brne	.-12     	; 0x1fe <Disp+0x3c>
 20a:	f0 2d       	mov	r31, r0
 20c:	98 01       	movw	r18, r16
	if(!(num/0x1000))
 20e:	61 15       	cp	r22, r1
 210:	c0 e1       	ldi	r28, 0x10	; 16
 212:	7c 07       	cpc	r23, r28
 214:	81 05       	cpc	r24, r1
 216:	91 05       	cpc	r25, r1
 218:	c8 f4       	brcc	.+50     	; 0x24c <Disp+0x8a>
	{
		n4=17;
		if(!(num/0x100))
 21a:	6f 3f       	cpi	r22, 0xFF	; 255
 21c:	71 05       	cpc	r23, r1
 21e:	81 05       	cpc	r24, r1
 220:	91 05       	cpc	r25, r1
 222:	09 f0       	breq	.+2      	; 0x226 <Disp+0x64>
 224:	50 f4       	brcc	.+20     	; 0x23a <Disp+0x78>
		{
			n3=17;
			if(!(num/0x10))n2=17;
 226:	60 31       	cpi	r22, 0x10	; 16
 228:	71 05       	cpc	r23, r1
 22a:	81 05       	cpc	r24, r1
 22c:	91 05       	cpc	r25, r1
 22e:	40 f0       	brcs	.+16     	; 0x240 <Disp+0x7e>
	int n2 = (num/0x10)%16;		//B 16		:
	int n3 = (num/0x100)%16;	//C 256
	int n4 = num/0x1000;		//D 4096	
	if(!(num/0x1000))
	{
		n4=17;
 230:	21 e1       	ldi	r18, 0x11	; 17
 232:	30 e0       	ldi	r19, 0x00	; 0
		if(!(num/0x100))
		{
			n3=17;
 234:	41 e1       	ldi	r20, 0x11	; 17
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	09 c0       	rjmp	.+18     	; 0x24c <Disp+0x8a>
	int n2 = (num/0x10)%16;		//B 16		:
	int n3 = (num/0x100)%16;	//C 256
	int n4 = num/0x1000;		//D 4096	
	if(!(num/0x1000))
	{
		n4=17;
 23a:	21 e1       	ldi	r18, 0x11	; 17
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	06 c0       	rjmp	.+12     	; 0x24c <Disp+0x8a>
 240:	21 e1       	ldi	r18, 0x11	; 17
 242:	30 e0       	ldi	r19, 0x00	; 0
		if(!(num/0x100))
		{
			n3=17;
 244:	41 e1       	ldi	r20, 0x11	; 17
 246:	50 e0       	ldi	r21, 0x00	; 0
			if(!(num/0x10))n2=17;
 248:	e1 e1       	ldi	r30, 0x11	; 17
 24a:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
	arr[0] = digit[n1];//char 1byte cast() LED문자로 표현
 24c:	a0 50       	subi	r26, 0x00	; 0
 24e:	bf 4f       	sbci	r27, 0xFF	; 255
 250:	8c 91       	ld	r24, X
 252:	a6 e1       	ldi	r26, 0x16	; 22
 254:	b1 e0       	ldi	r27, 0x01	; 1
 256:	8c 93       	st	X, r24
	arr[1] = digit[n2];
 258:	e0 50       	subi	r30, 0x00	; 0
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	80 81       	ld	r24, Z
 25e:	11 96       	adiw	r26, 0x01	; 1
 260:	8c 93       	st	X, r24
 262:	11 97       	sbiw	r26, 0x01	; 1
	arr[2] = digit[n3];
 264:	fa 01       	movw	r30, r20
 266:	e0 50       	subi	r30, 0x00	; 0
 268:	ff 4f       	sbci	r31, 0xFF	; 255
 26a:	80 81       	ld	r24, Z
 26c:	12 96       	adiw	r26, 0x02	; 2
 26e:	8c 93       	st	X, r24
 270:	12 97       	sbiw	r26, 0x02	; 2
	arr[3] = digit[n4];
 272:	f9 01       	movw	r30, r18
 274:	e0 50       	subi	r30, 0x00	; 0
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	80 81       	ld	r24, Z
 27a:	13 96       	adiw	r26, 0x03	; 3
 27c:	8c 93       	st	X, r24
 27e:	13 97       	sbiw	r26, 0x03	; 3
	//+, - 빠름
	//* 실수 연산 여러 클럭 사용
	//'/' 연산 여러 클럭 사용
	FND_4(arr);
 280:	cd 01       	movw	r24, r26
 282:	88 df       	rcall	.-240    	; 0x194 <FND_4>
	//return arr;
}
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	08 95       	ret

0000028c <main>:
    /* Replace with your application code */
	//7-segment 사용 : 4 Module - C type
	//	Pin assign : PAx -> Segment img, PBx - module sel
	//Interrupt 사용 : INT4 ~ INT6 (Ext Int)
	//	Pin assign: PE4 ~ PE6
	DDRD = 0xff;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0f;
 290:	8f e0       	ldi	r24, 0x0F	; 15
 292:	84 bb       	out	0x14, r24	; 20
	EIMSK = 0x70; //0111 0000b
 294:	80 e7       	ldi	r24, 0x70	; 112
 296:	89 bf       	out	0x39, r24	; 57
	EICRB = 0x2a; //0010 1010b
 298:	8a e2       	ldi	r24, 0x2A	; 42
 29a:	8a bf       	out	0x3a, r24	; 58
	SREG |= 0x80; //status Register - 인터럽트 허용
 29c:	8f b7       	in	r24, 0x3f	; 63
 29e:	80 68       	ori	r24, 0x80	; 128
 2a0:	8f bf       	out	0x3f, r24	; 63
	sei();		  //set interrupt - 인터럽트 시작
 2a2:	78 94       	sei
    
	unsigned long t = 0;
 2a4:	c1 2c       	mov	r12, r1
 2a6:	d1 2c       	mov	r13, r1
 2a8:	76 01       	movw	r14, r12
	while (1) 
    {
		switch(opmode)
 2aa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 2ae:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	41 f0       	breq	.+16     	; 0x2c6 <main+0x3a>
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	49 f4       	brne	.+18     	; 0x2cc <main+0x40>
		{
			case 0: // reset & wait 
			t=0; break;
			case 1: // counter start
			t++; break;
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	c8 1a       	sub	r12, r24
 2be:	d8 0a       	sbc	r13, r24
 2c0:	e8 0a       	sbc	r14, r24
 2c2:	f8 0a       	sbc	r15, r24
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <main+0x40>
	while (1) 
    {
		switch(opmode)
		{
			case 0: // reset & wait 
			t=0; break;
 2c6:	c1 2c       	mov	r12, r1
 2c8:	d1 2c       	mov	r13, r1
 2ca:	76 01       	movw	r14, r12
			t++; break;
			case 2: // count stop
				break;
			default: break;		
		}
		Disp(t);
 2cc:	c7 01       	movw	r24, r14
 2ce:	b6 01       	movw	r22, r12
 2d0:	78 df       	rcall	.-272    	; 0x1c2 <Disp>
    }
 2d2:	eb cf       	rjmp	.-42     	; 0x2aa <main+0x1e>

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
