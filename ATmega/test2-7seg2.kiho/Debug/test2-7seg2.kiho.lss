
test2-7seg2.kiho.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002a2  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e9  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b4  00000000  00000000  00000da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d2  00000000  00000000  00001659  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041e  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cb  00000000  00000000  00001e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002069  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ea       	ldi	r30, 0xA2	; 162
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	35 d0       	rcall	.+106    	; 0x11e <main>
  b4:	f4 c0       	rjmp	.+488    	; 0x29e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <display>:
#include <util/delay.h>
uint8_t numbers[]
= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f};

void display(int *d)
{
  b8:	bc 01       	movw	r22, r24
	int i = 0;
	for(i = 0; i<4 ; i++)
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	26 c0       	rjmp	.+76     	; 0x10c <display+0x54>
	{
		PORTC |= 0x0f;
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	8f 60       	ori	r24, 0x0F	; 15
  c4:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<(3-i));
  c6:	95 b3       	in	r25, 0x15	; 21
  c8:	e3 e0       	ldi	r30, 0x03	; 3
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	e4 1b       	sub	r30, r20
  ce:	f5 0b       	sbc	r31, r21
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <display+0x22>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	ea 95       	dec	r30
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <display+0x1e>
  de:	20 95       	com	r18
  e0:	29 23       	and	r18, r25
  e2:	25 bb       	out	0x15, r18	; 21
		PORTD = numbers[d[i]];
  e4:	fa 01       	movw	r30, r20
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	e6 0f       	add	r30, r22
  ec:	f7 1f       	adc	r31, r23
  ee:	01 90       	ld	r0, Z+
  f0:	f0 81       	ld	r31, Z
  f2:	e0 2d       	mov	r30, r0
  f4:	e0 50       	subi	r30, 0x00	; 0
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	80 81       	ld	r24, Z
  fa:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	8f e1       	ldi	r24, 0x1F	; 31
  fe:	9e e4       	ldi	r25, 0x4E	; 78
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <display+0x48>
 104:	00 c0       	rjmp	.+0      	; 0x106 <display+0x4e>
 106:	00 00       	nop
= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f};

void display(int *d)
{
	int i = 0;
	for(i = 0; i<4 ; i++)
 108:	4f 5f       	subi	r20, 0xFF	; 255
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	44 30       	cpi	r20, 0x04	; 4
 10e:	51 05       	cpc	r21, r1
 110:	bc f2       	brlt	.-82     	; 0xc0 <display+0x8>
		PORTC |= 0x0f;
		PORTC &= ~(1<<(3-i));
		PORTD = numbers[d[i]];
		_delay_ms(5);
	}
}
 112:	08 95       	ret

00000114 <reset>:


void reset()
{
	int i = 0;
	PORTC = 0x00;
 114:	15 ba       	out	0x15, r1	; 21
	//PORTE &= ~(1<<i);
	PORTD = numbers[16];
 116:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_end+0x6>
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	08 95       	ret

0000011e <main>:
}
//PORTE에 0이 출력 1이 출력 안함

int main(void)
{
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	28 97       	sbiw	r28, 0x08	; 8
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
	
	DDRD = 0xff;//세그먼트 제어 핀 8개를 출력으로 설정
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0f;//자릿수 전택 핀 4개를 출력으로 설정
 136:	8f e0       	ldi	r24, 0x0F	; 15
 138:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~0x01;
 13a:	87 b3       	in	r24, 0x17	; 23
 13c:	8e 7f       	andi	r24, 0xFE	; 254
 13e:	87 bb       	out	0x17, r24	; 23
    /* Replace with your application code */
	//PORTD -> *PORTD 포인터로 넘기기
	int i=0,j=0,count = 0;
	int start = 0;//0 stop 1 start 2 pause
	int d[4] = {0,0,0,0};
 140:	fe 01       	movw	r30, r28
 142:	31 96       	adiw	r30, 0x01	; 1
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	df 01       	movw	r26, r30
 148:	1d 92       	st	X+, r1
 14a:	8a 95       	dec	r24
 14c:	e9 f7       	brne	.-6      	; 0x148 <main+0x2a>
	reset();
 14e:	e2 df       	rcall	.-60     	; 0x114 <reset>
	DDRC = 0x0f;//자릿수 전택 핀 4개를 출력으로 설정
	DDRB &= ~0x01;
    /* Replace with your application code */
	//PORTD -> *PORTD 포인터로 넘기기
	int i=0,j=0,count = 0;
	int start = 0;//0 stop 1 start 2 pause
 150:	e1 2c       	mov	r14, r1
 152:	f1 2c       	mov	r15, r1
	DDRD = 0xff;//세그먼트 제어 핀 8개를 출력으로 설정
	DDRC = 0x0f;//자릿수 전택 핀 4개를 출력으로 설정
	DDRB &= ~0x01;
    /* Replace with your application code */
	//PORTD -> *PORTD 포인터로 넘기기
	int i=0,j=0,count = 0;
 154:	00 e0       	ldi	r16, 0x00	; 0
 156:	10 e0       	ldi	r17, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <main+0x40>
			d[3]=3;
			*/
			display(d);
			//_delay_ms(200);
			count ++;
			if(count>=10000)count = 0;
 15a:	00 e0       	ldi	r16, 0x00	; 0
 15c:	10 e0       	ldi	r17, 0x00	; 0
	int d[4] = {0,0,0,0};
	reset();
    while (1) 
    {
		///*
		if(!(PINB & 1) )
 15e:	b0 99       	sbic	0x16, 0	; 22
 160:	23 c0       	rjmp	.+70     	; 0x1a8 <main+0x8a>
 162:	bf ef       	ldi	r27, 0xFF	; 255
 164:	23 ec       	ldi	r18, 0xC3	; 195
 166:	49 e0       	ldi	r20, 0x09	; 9
 168:	b1 50       	subi	r27, 0x01	; 1
 16a:	20 40       	sbci	r18, 0x00	; 0
 16c:	40 40       	sbci	r20, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x4a>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x54>
 172:	00 00       	nop
		{
			_delay_ms(200);
			switch(start)
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	e8 16       	cp	r14, r24
 178:	f1 04       	cpc	r15, r1
 17a:	41 f0       	breq	.+16     	; 0x18c <main+0x6e>
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	e9 16       	cp	r14, r25
 180:	f1 04       	cpc	r15, r1
 182:	49 f0       	breq	.+18     	; 0x196 <main+0x78>
 184:	e1 14       	cp	r14, r1
 186:	f1 04       	cpc	r15, r1
 188:	79 f4       	brne	.+30     	; 0x1a8 <main+0x8a>
 18a:	0b c0       	rjmp	.+22     	; 0x1a2 <main+0x84>
			{
				case 0:
				start = 1;
				break;
				case 1:
				start = 2;
 18c:	68 94       	set
 18e:	ee 24       	eor	r14, r14
 190:	e1 f8       	bld	r14, 1
 192:	f1 2c       	mov	r15, r1
				break;
				case 2:
				reset();
 194:	09 c0       	rjmp	.+18     	; 0x1a8 <main+0x8a>
 196:	be df       	rcall	.-132    	; 0x114 <reset>
				start = 0;
 198:	e1 2c       	mov	r14, r1
 19a:	f1 2c       	mov	r15, r1
				count = 0;
 19c:	00 e0       	ldi	r16, 0x00	; 0
 19e:	10 e0       	ldi	r17, 0x00	; 0
				break;
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <main+0x8a>
		{
			_delay_ms(200);
			switch(start)
			{
				case 0:
				start = 1;
 1a2:	ee 24       	eor	r14, r14
 1a4:	e3 94       	inc	r14
 1a6:	f1 2c       	mov	r15, r1
			}
		}//*/
		
		
		
		switch(start)
 1a8:	a1 e0       	ldi	r26, 0x01	; 1
 1aa:	ea 16       	cp	r14, r26
 1ac:	f1 04       	cpc	r15, r1
 1ae:	31 f0       	breq	.+12     	; 0x1bc <main+0x9e>
 1b0:	b2 e0       	ldi	r27, 0x02	; 2
 1b2:	eb 16       	cp	r14, r27
 1b4:	f1 04       	cpc	r15, r1
 1b6:	09 f4       	brne	.+2      	; 0x1ba <main+0x9c>
 1b8:	43 c0       	rjmp	.+134    	; 0x240 <main+0x122>
 1ba:	46 c0       	rjmp	.+140    	; 0x248 <main+0x12a>
			}
			PORTD = numbers[count++%16];
			*/
			
			///*	
			d[0] = count%10;
 1bc:	ea e0       	ldi	r30, 0x0A	; 10
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	c8 01       	movw	r24, r16
 1c2:	bf 01       	movw	r22, r30
 1c4:	45 d0       	rcall	.+138    	; 0x250 <__divmodhi4>
 1c6:	9a 83       	std	Y+2, r25	; 0x02
 1c8:	89 83       	std	Y+1, r24	; 0x01
			d[1] = (count%100)/10;
 1ca:	24 e6       	ldi	r18, 0x64	; 100
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	c8 01       	movw	r24, r16
 1d0:	b9 01       	movw	r22, r18
 1d2:	3e d0       	rcall	.+124    	; 0x250 <__divmodhi4>
 1d4:	bf 01       	movw	r22, r30
 1d6:	3c d0       	rcall	.+120    	; 0x250 <__divmodhi4>
 1d8:	7c 83       	std	Y+4, r23	; 0x04
 1da:	6b 83       	std	Y+3, r22	; 0x03
			d[2] = (count%1000)/100;
 1dc:	c8 01       	movw	r24, r16
 1de:	68 ee       	ldi	r22, 0xE8	; 232
 1e0:	73 e0       	ldi	r23, 0x03	; 3
 1e2:	36 d0       	rcall	.+108    	; 0x250 <__divmodhi4>
 1e4:	fb 01       	movw	r30, r22
 1e6:	b9 01       	movw	r22, r18
 1e8:	33 d0       	rcall	.+102    	; 0x250 <__divmodhi4>
 1ea:	7e 83       	std	Y+6, r23	; 0x06
 1ec:	6d 83       	std	Y+5, r22	; 0x05
 1ee:	f8 87       	std	Y+8, r31	; 0x08
			d[3] = count/1000;//count max 9999
 1f0:	ef 83       	std	Y+7, r30	; 0x07
 1f2:	98 01       	movw	r18, r16
			
			if(!(count/1000))
 1f4:	c8 01       	movw	r24, r16
 1f6:	89 51       	subi	r24, 0x19	; 25
 1f8:	9c 4f       	sbci	r25, 0xFC	; 252
 1fa:	8f 3c       	cpi	r24, 0xCF	; 207
 1fc:	97 40       	sbci	r25, 0x07	; 7
 1fe:	a8 f4       	brcc	.+42     	; 0x22a <main+0x10c>
 200:	81 e1       	ldi	r24, 0x11	; 17
			{
				d[3]=17;
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	98 87       	std	Y+8, r25	; 0x08
 206:	8f 83       	std	Y+7, r24	; 0x07
 208:	c8 01       	movw	r24, r16
				if(!(count/100))
 20a:	8d 59       	subi	r24, 0x9D	; 157
 20c:	9f 4f       	sbci	r25, 0xFF	; 255
 20e:	87 3c       	cpi	r24, 0xC7	; 199
 210:	91 05       	cpc	r25, r1
 212:	58 f4       	brcc	.+22     	; 0x22a <main+0x10c>
 214:	81 e1       	ldi	r24, 0x11	; 17
				{
					d[2]=17;
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	9e 83       	std	Y+6, r25	; 0x06
 21a:	8d 83       	std	Y+5, r24	; 0x05
 21c:	27 5f       	subi	r18, 0xF7	; 247
					if(!(count/10))d[1]=17;
 21e:	3f 4f       	sbci	r19, 0xFF	; 255
 220:	23 31       	cpi	r18, 0x13	; 19
 222:	31 05       	cpc	r19, r1
 224:	10 f4       	brcc	.+4      	; 0x22a <main+0x10c>
 226:	9c 83       	std	Y+4, r25	; 0x04
 228:	8b 83       	std	Y+3, r24	; 0x03
			d[0]=0;
			d[1]=1;
			d[2]=5;
			d[3]=3;
			*/
			display(d);
 22a:	ce 01       	movw	r24, r28
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	44 df       	rcall	.-376    	; 0xb8 <display>
 230:	0f 5f       	subi	r16, 0xFF	; 255
			//_delay_ms(200);
			count ++;
 232:	1f 4f       	sbci	r17, 0xFF	; 255
 234:	00 31       	cpi	r16, 0x10	; 16
			if(count>=10000)count = 0;
 236:	87 e2       	ldi	r24, 0x27	; 39
 238:	18 07       	cpc	r17, r24
 23a:	0c f0       	brlt	.+2      	; 0x23e <main+0x120>
 23c:	8e cf       	rjmp	.-228    	; 0x15a <main+0x3c>
			break;
			
			case 2:
			display(d);
 23e:	8f cf       	rjmp	.-226    	; 0x15e <main+0x40>
 240:	ce 01       	movw	r24, r28
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	39 df       	rcall	.-398    	; 0xb8 <display>
			break;
 246:	8b cf       	rjmp	.-234    	; 0x15e <main+0x40>
			
			default:
			start = 0;
			reset();
 248:	65 df       	rcall	.-310    	; 0x114 <reset>
 24a:	e1 2c       	mov	r14, r1
			case 2:
			display(d);
			break;
			
			default:
			start = 0;
 24c:	f1 2c       	mov	r15, r1
 24e:	87 cf       	rjmp	.-242    	; 0x15e <main+0x40>

00000250 <__divmodhi4>:
			reset();
			break;
 250:	97 fb       	bst	r25, 7
 252:	07 2e       	mov	r0, r23
 254:	16 f4       	brtc	.+4      	; 0x25a <__divmodhi4+0xa>
 256:	00 94       	com	r0
 258:	06 d0       	rcall	.+12     	; 0x266 <__divmodhi4_neg1>
 25a:	77 fd       	sbrc	r23, 7
 25c:	08 d0       	rcall	.+16     	; 0x26e <__divmodhi4_neg2>
 25e:	0b d0       	rcall	.+22     	; 0x276 <__udivmodhi4>
 260:	07 fc       	sbrc	r0, 7
 262:	05 d0       	rcall	.+10     	; 0x26e <__divmodhi4_neg2>
 264:	3e f4       	brtc	.+14     	; 0x274 <__divmodhi4_exit>

00000266 <__divmodhi4_neg1>:
 266:	90 95       	com	r25
 268:	81 95       	neg	r24
 26a:	9f 4f       	sbci	r25, 0xFF	; 255
 26c:	08 95       	ret

0000026e <__divmodhi4_neg2>:
 26e:	70 95       	com	r23
 270:	61 95       	neg	r22
 272:	7f 4f       	sbci	r23, 0xFF	; 255

00000274 <__divmodhi4_exit>:
 274:	08 95       	ret

00000276 <__udivmodhi4>:
 276:	aa 1b       	sub	r26, r26
 278:	bb 1b       	sub	r27, r27
 27a:	51 e1       	ldi	r21, 0x11	; 17
 27c:	07 c0       	rjmp	.+14     	; 0x28c <__udivmodhi4_ep>

0000027e <__udivmodhi4_loop>:
 27e:	aa 1f       	adc	r26, r26
 280:	bb 1f       	adc	r27, r27
 282:	a6 17       	cp	r26, r22
 284:	b7 07       	cpc	r27, r23
 286:	10 f0       	brcs	.+4      	; 0x28c <__udivmodhi4_ep>
 288:	a6 1b       	sub	r26, r22
 28a:	b7 0b       	sbc	r27, r23

0000028c <__udivmodhi4_ep>:
 28c:	88 1f       	adc	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	5a 95       	dec	r21
 292:	a9 f7       	brne	.-22     	; 0x27e <__udivmodhi4_loop>
 294:	80 95       	com	r24
 296:	90 95       	com	r25
 298:	bc 01       	movw	r22, r24
 29a:	cd 01       	movw	r24, r26
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
