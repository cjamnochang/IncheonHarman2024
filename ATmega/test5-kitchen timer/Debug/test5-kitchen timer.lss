
test5-kitchen timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000cd6  00000d6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800126  00800126  00000d90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000168c  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a85  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000087b  00000000  00000000  00002f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00003810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f4  00000000  00000000  000039d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dfe  00000000  00000000  00003ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004cc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	47 c4       	rjmp	.+2190   	; 0x8a4 <__vector_5>
  16:	00 00       	nop
  18:	6f c4       	rjmp	.+2270   	; 0x8f8 <__vector_6>
  1a:	00 00       	nop
  1c:	84 c4       	rjmp	.+2312   	; 0x926 <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	b7 c4       	rjmp	.+2414   	; 0x9a8 <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 34       	cpi	r26, 0x43	; 67
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	06 c6       	rjmp	.+3084   	; 0xcd2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
volatile unsigned long cnt = 0, tcnt = 0;
uint8_t	numb[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67, 0x77, 0x7c, 0x58, 0x5e, 0x79, 0x71 };
int mode = 0, endtime = 0;;

int main(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <main+0x6>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <main+0x8>
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	//기본 설정 묶음
	{
		SegPortSet(&PORTD, &PORTC);
  d4:	65 e3       	ldi	r22, 0x35	; 53
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	82 e3       	ldi	r24, 0x32	; 50
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	c1 d4       	rcall	.+2434   	; 0xa60 <SegPortSet>
		//	Pin assign	: PDx - Segment img, PCx - module sel
		//Interrupt 사용	: INT4~INT6 (External Interrupt)
		//	Pin assign	: PE4~PE6

		//인터럽트 설정
		EIMSK = 0x70;	//0111 0000	//INT 4~INT 6 활성화
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	89 bf       	out	0x39, r24	; 57
		EICRB = 0x2a;	//4개의 B그룹(INT4~INT7)의 인터럽트 발생 시점 결정(00 10 10 10, 각 7 6 5 4에서의 INT발생 시점을 rising edge로 결정)
  e2:	8a e2       	ldi	r24, 0x2A	; 42
  e4:	8a bf       	out	0x3a, r24	; 58
		DDRD = 0XFF;	//D포트의 모든 비트를 출력으로 설정
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	81 bb       	out	0x11, r24	; 17
		DDRC = 0X0F;	//D포트의 네개 비트를 출력으로 설정
  ea:	8f e0       	ldi	r24, 0x0F	; 15
  ec:	84 bb       	out	0x14, r24	; 20
		DDRE = 0x00;
  ee:	12 b8       	out	0x02, r1	; 2
		DDRA |= 0x80;	//A포트의 7번 비트를 출력으로 설정
  f0:	8a b3       	in	r24, 0x1a	; 26
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	8a bb       	out	0x1a, r24	; 26
		
		TIMSK |= 0x04;	//Timer Interrupt Mask을 0000 0100b로 설정하여 오버플로 인터럽트 활성화 [Timer 1 TCNT Overflow interrupt]
  f6:	87 b7       	in	r24, 0x37	; 55
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	87 bf       	out	0x37, r24	; 55
		//TIMSK |= 0x01;	//Timer Interrupt Mask을 0000 0001b로 설정하여 오버플로 인터럽트 활성화 [Timer 0 TCNT Overflow interrupt]
		//TIMSK |= 0x40;	//Timer Interrupt Mask을 0000 0001b로 설정하여 오버플로 인터럽트 활성화 [Timer 2 TCNT Overflow interrupt]
		TCCR1B |= 0x04; //16KHz를 구하기 위해 분주비 (Pre-Scaler) 64 필요 -> 비트를 0000 0100b로 설정 (타이머 1에 대한 분주기가 256)
  fc:	8e b5       	in	r24, 0x2e	; 46
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	8e bd       	out	0x2e, r24	; 46
		//TCCR0 |= 0x04; //16KHz를 구하기 위해 분주비 (Pre-Scaler) 64 필요 -> 비트를 0000 0100b로 설정 (타이머 0에 대한 분주기)
		//TCCR2 |= 0x04; //16KHz를 구하기 위해 분주비 (Pre-Scaler) 64 필요 -> 비트를 0000 0100b로 설정 (타이머 2에 대한 분주기)
		SREG |= 0x80;
 102:	8f b7       	in	r24, 0x3f	; 63
 104:	80 68       	ori	r24, 0x80	; 128
 106:	8f bf       	out	0x3f, r24	; 63
		sei();
 108:	78 94       	sei
	}
	
	int time;	//mode가 0이면 초기 시간 설정 창, mode가 1이면 타이머 시작
	int min10, min1, sec10, sec1;
	
	char timearr[4] = {0x40, 0x40, 0x40, 0x40};
 10a:	80 e4       	ldi	r24, 0x40	; 64
 10c:	89 83       	std	Y+1, r24	; 0x01
 10e:	8a 83       	std	Y+2, r24	; 0x02
 110:	8b 83       	std	Y+3, r24	; 0x03
 112:	8c 83       	std	Y+4, r24	; 0x04
	char timeinit[4] = {0, 0, 0, 0};
	
	while (1)
	{
		switch (mode){	//처음 시작하면 mode가 0이므로 초기 시간 설정화면 코드
 114:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <mode>
 118:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <mode+0x1>
 11c:	00 97       	sbiw	r24, 0x00	; 0
 11e:	21 f0       	breq	.+8      	; 0x128 <main+0x60>
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	09 f4       	brne	.+2      	; 0x126 <main+0x5e>
 124:	cf c2       	rjmp	.+1438   	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 126:	f6 cf       	rjmp	.-20     	; 0x114 <main+0x4c>
			case 0:	//처음 시간 설정 모드
			switch(settimeth){
 128:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 12c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	91 05       	cpc	r25, r1
 134:	09 f4       	brne	.+2      	; 0x138 <main+0x70>
 136:	bb c0       	rjmp	.+374    	; 0x2ae <main+0x1e6>
 138:	1c f4       	brge	.+6      	; 0x140 <main+0x78>
 13a:	89 2b       	or	r24, r25
 13c:	49 f0       	breq	.+18     	; 0x150 <main+0x88>
 13e:	ea cf       	rjmp	.-44     	; 0x114 <main+0x4c>
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	91 05       	cpc	r25, r1
 144:	09 f4       	brne	.+2      	; 0x148 <main+0x80>
 146:	63 c1       	rjmp	.+710    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 148:	03 97       	sbiw	r24, 0x03	; 3
 14a:	09 f4       	brne	.+2      	; 0x14e <main+0x86>
 14c:	0c c2       	rjmp	.+1048   	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 14e:	e2 cf       	rjmp	.-60     	; 0x114 <main+0x4c>
				case 0:	//10분 단위 설정
				timeup = 0; timedown = 0;
 150:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <timeup+0x1>
 154:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <timeup>
 158:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <timedown+0x1>
 15c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <timedown>
				while(1){
					time = timeup - timedown;
 160:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timeup>
 164:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timeup+0x1>
 168:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <timedown>
 16c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <timedown+0x1>
 170:	82 1b       	sub	r24, r18
 172:	93 0b       	sbc	r25, r19
					if(timeup == 0){			//timeup이 0이면 버튼을 누르지 않았으므로 - 표시
 174:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <timeup>
 178:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <timeup+0x1>
 17c:	23 2b       	or	r18, r19
 17e:	19 f5       	brne	.+70     	; 0x1c6 <main+0xfe>
						display_character(settimeth+1, 1);
 180:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 184:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	68 d5       	rcall	.+2768   	; 0xc60 <display_character>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	39 e6       	ldi	r19, 0x69	; 105
 194:	88 e1       	ldi	r24, 0x18	; 24
 196:	21 50       	subi	r18, 0x01	; 1
 198:	30 40       	sbci	r19, 0x00	; 0
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0xce>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0xd8>
 1a0:	00 00       	nop
						_delay_ms(500);
						display_character(settimeth+1, 0);
 1a2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 1a6:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	57 d5       	rcall	.+2734   	; 0xc60 <display_character>
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	29 e6       	ldi	r18, 0x69	; 105
 1b6:	38 e1       	ldi	r19, 0x18	; 24
 1b8:	91 50       	subi	r25, 0x01	; 1
 1ba:	20 40       	sbci	r18, 0x00	; 0
 1bc:	30 40       	sbci	r19, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0xf0>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0xfa>
 1c2:	00 00       	nop
 1c4:	43 c0       	rjmp	.+134    	; 0x24c <main+0x184>
						//_delay_ms(500);
						//FND_4(timeinit);
						//_delay_ms(500);
					}
					else{							//timeup이 0이 아니면 버튼을 눌렀으므로 화면에 숫자 표시
						if ( time > 9) time = 9;	//10분 단위는 9이상 올라갈 수 없으므로 최댓값 9로 설정
 1c6:	8a 30       	cpi	r24, 0x0A	; 10
 1c8:	91 05       	cpc	r25, r1
 1ca:	14 f4       	brge	.+4      	; 0x1d0 <main+0x108>
			case 0:	//처음 시간 설정 모드
			switch(settimeth){
				case 0:	//10분 단위 설정
				timeup = 0; timedown = 0;
				while(1){
					time = timeup - timedown;
 1cc:	7c 01       	movw	r14, r24
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <main+0x112>
						//_delay_ms(500);
						//FND_4(timeinit);
						//_delay_ms(500);
					}
					else{							//timeup이 0이 아니면 버튼을 눌렀으므로 화면에 숫자 표시
						if ( time > 9) time = 9;	//10분 단위는 9이상 올라갈 수 없으므로 최댓값 9로 설정
 1d0:	0f 2e       	mov	r0, r31
 1d2:	f9 e0       	ldi	r31, 0x09	; 9
 1d4:	ef 2e       	mov	r14, r31
 1d6:	f1 2c       	mov	r15, r1
 1d8:	f0 2d       	mov	r31, r0
						if ( time <= 0) time = 0;	//시간은 0 이하 내려갈 수 없으므로 최솟값 0로 설정
 1da:	1e 14       	cp	r1, r14
 1dc:	1f 04       	cpc	r1, r15
 1de:	14 f0       	brlt	.+4      	; 0x1e4 <main+0x11c>
 1e0:	e1 2c       	mov	r14, r1
 1e2:	f1 2c       	mov	r15, r1
						
						timearr[3-settimeth] = numb[time];
 1e4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 1e8:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 1ec:	e3 e0       	ldi	r30, 0x03	; 3
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	e8 1b       	sub	r30, r24
 1f2:	f9 0b       	sbc	r31, r25
 1f4:	d7 01       	movw	r26, r14
 1f6:	a0 50       	subi	r26, 0x00	; 0
 1f8:	bf 4f       	sbci	r27, 0xFF	; 255
 1fa:	8c 91       	ld	r24, X
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	2c 0f       	add	r18, r28
 202:	3d 1f       	adc	r19, r29
 204:	e2 0f       	add	r30, r18
 206:	f3 1f       	adc	r31, r19
 208:	80 83       	st	Z, r24
						min10 = time;
						display_digit(settimeth+1, time);
 20a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 20e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 212:	b7 01       	movw	r22, r14
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	0d d5       	rcall	.+2586   	; 0xc32 <display_digit>
 218:	3f ef       	ldi	r19, 0xFF	; 255
 21a:	89 e6       	ldi	r24, 0x69	; 105
 21c:	98 e1       	ldi	r25, 0x18	; 24
 21e:	31 50       	subi	r19, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0x156>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x160>
 228:	00 00       	nop
						_delay_ms(500);
						display_character(settimeth+1, 1);
 22a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 22e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	13 d5       	rcall	.+2598   	; 0xc60 <display_character>
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	39 e6       	ldi	r19, 0x69	; 105
 23e:	88 e1       	ldi	r24, 0x18	; 24
 240:	21 50       	subi	r18, 0x01	; 1
 242:	30 40       	sbci	r19, 0x00	; 0
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x178>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x182>
 24a:	00 00       	nop
						//FND_4(timearr);
						//_delay_ms(500);
						//FND_4(timeinit);
						//_delay_ms(500);
					}
					if(timeup != 0 & complete == 1){	//sw3을 누르면 탈출, 다음 숫자로 넘김
 24c:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <timeup>
 250:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <timeup+0x1>
 254:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <complete>
 258:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <complete+0x1>
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	45 2b       	or	r20, r21
 260:	09 f4       	brne	.+2      	; 0x264 <main+0x19c>
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	21 30       	cpi	r18, 0x01	; 1
 268:	31 05       	cpc	r19, r1
 26a:	09 f0       	breq	.+2      	; 0x26e <main+0x1a6>
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	89 23       	and	r24, r25
 270:	09 f4       	brne	.+2      	; 0x274 <main+0x1ac>
 272:	76 cf       	rjmp	.-276    	; 0x160 <main+0x98>
 274:	9f ef       	ldi	r25, 0xFF	; 255
 276:	21 ee       	ldi	r18, 0xE1	; 225
 278:	34 e0       	ldi	r19, 0x04	; 4
 27a:	91 50       	subi	r25, 0x01	; 1
 27c:	20 40       	sbci	r18, 0x00	; 0
 27e:	30 40       	sbci	r19, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x1b2>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x1bc>
 284:	00 00       	nop
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	91 ee       	ldi	r25, 0xE1	; 225
 28a:	24 e0       	ldi	r18, 0x04	; 4
 28c:	81 50       	subi	r24, 0x01	; 1
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	20 40       	sbci	r18, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x1c4>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x1ce>
 296:	00 00       	nop
						_delay_ms(100);
						break;
					}
				}
				_delay_ms(100);
				complete = 0;
 298:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <complete+0x1>
 29c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <complete>
				settimeth = 1;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <settimeth+0x1>
 2a8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <settimeth>
				break;
 2ac:	33 cf       	rjmp	.-410    	; 0x114 <main+0x4c>
				
				case 1:	//1분 단위 설정
				complete = 0;
 2ae:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <complete+0x1>
 2b2:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <complete>
				timeup = 0; timedown = 0;
 2b6:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <timeup+0x1>
 2ba:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <timeup>
 2be:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <timedown+0x1>
 2c2:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <timedown>
				while(1){
					time = timeup - timedown;
 2c6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timeup>
 2ca:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timeup+0x1>
 2ce:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <timedown>
 2d2:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <timedown+0x1>
 2d6:	82 1b       	sub	r24, r18
 2d8:	93 0b       	sbc	r25, r19
					if(timeup == 0){			//timeup이 0이면 버튼을 누르지 않았으므로 - 표시
 2da:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <timeup>
 2de:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <timeup+0x1>
 2e2:	23 2b       	or	r18, r19
 2e4:	19 f5       	brne	.+70     	; 0x32c <main+0x264>
						display_character(settimeth+1, 1);
 2e6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 2ea:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	b5 d4       	rcall	.+2410   	; 0xc60 <display_character>
 2f6:	3f ef       	ldi	r19, 0xFF	; 255
 2f8:	89 e6       	ldi	r24, 0x69	; 105
 2fa:	98 e1       	ldi	r25, 0x18	; 24
 2fc:	31 50       	subi	r19, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x234>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x23e>
 306:	00 00       	nop
						_delay_ms(500);
						display_character(settimeth+1, 0);
 308:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 30c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	a4 d4       	rcall	.+2376   	; 0xc60 <display_character>
 318:	2f ef       	ldi	r18, 0xFF	; 255
 31a:	39 e6       	ldi	r19, 0x69	; 105
 31c:	88 e1       	ldi	r24, 0x18	; 24
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	30 40       	sbci	r19, 0x00	; 0
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <main+0x256>
 326:	00 c0       	rjmp	.+0      	; 0x328 <main+0x260>
 328:	00 00       	nop
 32a:	44 c0       	rjmp	.+136    	; 0x3b4 <main+0x2ec>
						//_delay_ms(500);
						//FND_4(timeinit);
						//_delay_ms(500);
					}
					else{							//timeup이 0이 아니면 버튼을 눌렀으므로 화면에 숫자 표시
						if ( time > 9) time = 9;	//10분 단위는 9이상 올라갈 수 없으므로 최댓값 9로 설정
 32c:	8a 30       	cpi	r24, 0x0A	; 10
 32e:	91 05       	cpc	r25, r1
 330:	14 f4       	brge	.+4      	; 0x336 <main+0x26e>
				
				case 1:	//1분 단위 설정
				complete = 0;
				timeup = 0; timedown = 0;
				while(1){
					time = timeup - timedown;
 332:	6c 01       	movw	r12, r24
 334:	05 c0       	rjmp	.+10     	; 0x340 <main+0x278>
						//_delay_ms(500);
						//FND_4(timeinit);
						//_delay_ms(500);
					}
					else{							//timeup이 0이 아니면 버튼을 눌렀으므로 화면에 숫자 표시
						if ( time > 9) time = 9;	//10분 단위는 9이상 올라갈 수 없으므로 최댓값 9로 설정
 336:	0f 2e       	mov	r0, r31
 338:	f9 e0       	ldi	r31, 0x09	; 9
 33a:	cf 2e       	mov	r12, r31
 33c:	d1 2c       	mov	r13, r1
 33e:	f0 2d       	mov	r31, r0
						if ( time <= 0) time = 0;	//시간은 0 이하 내려갈 수 없으므로 최솟값 0로 설정
 340:	1c 14       	cp	r1, r12
 342:	1d 04       	cpc	r1, r13
 344:	14 f0       	brlt	.+4      	; 0x34a <main+0x282>
 346:	c1 2c       	mov	r12, r1
 348:	d1 2c       	mov	r13, r1
						
						timearr[3-settimeth] = numb[time]+0x80;
 34a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 34e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 352:	e3 e0       	ldi	r30, 0x03	; 3
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	e8 1b       	sub	r30, r24
 358:	f9 0b       	sbc	r31, r25
 35a:	d6 01       	movw	r26, r12
 35c:	a0 50       	subi	r26, 0x00	; 0
 35e:	bf 4f       	sbci	r27, 0xFF	; 255
 360:	8c 91       	ld	r24, X
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	2c 0f       	add	r18, r28
 368:	3d 1f       	adc	r19, r29
 36a:	e2 0f       	add	r30, r18
 36c:	f3 1f       	adc	r31, r19
 36e:	80 58       	subi	r24, 0x80	; 128
						min1 = time;
						display_digit(settimeth+1, time);
 370:	80 83       	st	Z, r24
 372:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 376:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 37a:	b6 01       	movw	r22, r12
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	59 d4       	rcall	.+2226   	; 0xc32 <display_digit>
 380:	3f ef       	ldi	r19, 0xFF	; 255
 382:	89 e6       	ldi	r24, 0x69	; 105
 384:	98 e1       	ldi	r25, 0x18	; 24
 386:	31 50       	subi	r19, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <main+0x2be>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <main+0x2c8>
						_delay_ms(500);
						display_character(settimeth+1, 1);
 390:	00 00       	nop
 392:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 396:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	5f d4       	rcall	.+2238   	; 0xc60 <display_character>
 3a2:	2f ef       	ldi	r18, 0xFF	; 255
 3a4:	39 e6       	ldi	r19, 0x69	; 105
 3a6:	88 e1       	ldi	r24, 0x18	; 24
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	30 40       	sbci	r19, 0x00	; 0
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <main+0x2e0>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0x2ea>
 3b2:	00 00       	nop
						//FND_4(timearr);
						//_delay_ms(500);
						//FND_4(timeinit);
						//_delay_ms(500);
					}
					if(timeup != 0 & complete == 1){	//sw3을 누르면 탈출, 다음 숫자로 넘김,
 3b4:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <timeup>
 3b8:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <timeup+0x1>
 3bc:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <complete>
 3c0:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <complete+0x1>
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	45 2b       	or	r20, r21
 3c8:	09 f4       	brne	.+2      	; 0x3cc <main+0x304>
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	21 30       	cpi	r18, 0x01	; 1
 3d0:	31 05       	cpc	r19, r1
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <main+0x30e>
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	89 23       	and	r24, r25
 3d8:	09 f4       	brne	.+2      	; 0x3dc <main+0x314>
 3da:	75 cf       	rjmp	.-278    	; 0x2c6 <main+0x1fe>
 3dc:	9f ef       	ldi	r25, 0xFF	; 255
 3de:	21 ee       	ldi	r18, 0xE1	; 225
 3e0:	34 e0       	ldi	r19, 0x04	; 4
 3e2:	91 50       	subi	r25, 0x01	; 1
 3e4:	20 40       	sbci	r18, 0x00	; 0
 3e6:	30 40       	sbci	r19, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <main+0x31a>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <main+0x324>
 3ec:	00 00       	nop
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	91 ee       	ldi	r25, 0xE1	; 225
 3f2:	24 e0       	ldi	r18, 0x04	; 4
 3f4:	81 50       	subi	r24, 0x01	; 1
 3f6:	90 40       	sbci	r25, 0x00	; 0
 3f8:	20 40       	sbci	r18, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x32c>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x336>
 3fe:	00 00       	nop
						_delay_ms(100);
						break;
					}
				}
				_delay_ms(100);
				settimeth =2;
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <settimeth+0x1>
 408:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <settimeth>
				break;
 40c:	83 ce       	rjmp	.-762    	; 0x114 <main+0x4c>
				
				case 2:	//10초 단위 설정
				complete = 0;
 40e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <complete+0x1>
 412:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <complete>
				timeup = 0; timedown = 0;
 416:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <timeup+0x1>
 41a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <timeup>
 41e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <timedown+0x1>
 422:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <timedown>
				while(1){
					time = timeup - timedown;
 426:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timeup>
 42a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timeup+0x1>
 42e:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <timedown>
 432:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <timedown+0x1>
 436:	82 1b       	sub	r24, r18
 438:	93 0b       	sbc	r25, r19
					if(timeup == 0){			//timeup이 0이면 버튼을 누르지 않았으므로 - 표시
 43a:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <timeup>
 43e:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <timeup+0x1>
 442:	23 2b       	or	r18, r19
						display_character(settimeth+1, 1);
 444:	19 f5       	brne	.+70     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 446:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 44a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	05 d4       	rcall	.+2058   	; 0xc60 <display_character>
 456:	3f ef       	ldi	r19, 0xFF	; 255
 458:	89 e6       	ldi	r24, 0x69	; 105
 45a:	98 e1       	ldi	r25, 0x18	; 24
 45c:	31 50       	subi	r19, 0x01	; 1
 45e:	80 40       	sbci	r24, 0x00	; 0
 460:	90 40       	sbci	r25, 0x00	; 0
 462:	e1 f7       	brne	.-8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
						_delay_ms(500);
						display_character(settimeth+1, 0);
 466:	00 00       	nop
 468:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 46c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	f4 d3       	rcall	.+2024   	; 0xc60 <display_character>
 478:	2f ef       	ldi	r18, 0xFF	; 255
 47a:	39 e6       	ldi	r19, 0x69	; 105
 47c:	88 e1       	ldi	r24, 0x18	; 24
 47e:	21 50       	subi	r18, 0x01	; 1
 480:	30 40       	sbci	r19, 0x00	; 0
 482:	80 40       	sbci	r24, 0x00	; 0
 484:	e1 f7       	brne	.-8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 488:	00 00       	nop
 48a:	40 c0       	rjmp	.+128    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
						//_delay_ms(500);
						//FND_4(timeinit);
						//_delay_ms(500);
					}
					else{							//timeup이 0이 아니면 버튼을 눌렀으므로 화면에 숫자 표시
						if ( time > 5) time = 5;	//10초 단위는 6이상 올라갈 수 없으므로 최댓값 5로 설정
 48c:	86 30       	cpi	r24, 0x06	; 6
 48e:	91 05       	cpc	r25, r1
 490:	14 f4       	brge	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
				
				case 2:	//10초 단위 설정
				complete = 0;
				timeup = 0; timedown = 0;
				while(1){
					time = timeup - timedown;
 492:	8c 01       	movw	r16, r24
 494:	02 c0       	rjmp	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
						//_delay_ms(500);
						//FND_4(timeinit);
						//_delay_ms(500);
					}
					else{							//timeup이 0이 아니면 버튼을 눌렀으므로 화면에 숫자 표시
						if ( time > 5) time = 5;	//10초 단위는 6이상 올라갈 수 없으므로 최댓값 5로 설정
 496:	05 e0       	ldi	r16, 0x05	; 5
 498:	10 e0       	ldi	r17, 0x00	; 0
						if ( time <= 0) time = 0;	//시간은 0 이하 내려갈 수 없으므로 최솟값 0로 설정
 49a:	10 16       	cp	r1, r16
 49c:	11 06       	cpc	r1, r17
 49e:	14 f0       	brlt	.+4      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a0:	00 e0       	ldi	r16, 0x00	; 0
 4a2:	10 e0       	ldi	r17, 0x00	; 0
						
						timearr[3-settimeth] = numb[time];
 4a4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 4a8:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 4ac:	e3 e0       	ldi	r30, 0x03	; 3
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	e8 1b       	sub	r30, r24
 4b2:	f9 0b       	sbc	r31, r25
 4b4:	d8 01       	movw	r26, r16
 4b6:	a0 50       	subi	r26, 0x00	; 0
 4b8:	bf 4f       	sbci	r27, 0xFF	; 255
 4ba:	8c 91       	ld	r24, X
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	2c 0f       	add	r18, r28
 4c2:	3d 1f       	adc	r19, r29
 4c4:	e2 0f       	add	r30, r18
 4c6:	f3 1f       	adc	r31, r19
						sec10 = time;
						display_digit(settimeth+1, time);
 4c8:	80 83       	st	Z, r24
 4ca:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 4ce:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 4d2:	b8 01       	movw	r22, r16
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	ad d3       	rcall	.+1882   	; 0xc32 <display_digit>
 4d8:	3f ef       	ldi	r19, 0xFF	; 255
 4da:	89 e6       	ldi	r24, 0x69	; 105
 4dc:	98 e1       	ldi	r25, 0x18	; 24
 4de:	31 50       	subi	r19, 0x01	; 1
 4e0:	80 40       	sbci	r24, 0x00	; 0
 4e2:	90 40       	sbci	r25, 0x00	; 0
 4e4:	e1 f7       	brne	.-8      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
						_delay_ms(500);
						display_character(settimeth+1, 1);
 4e8:	00 00       	nop
 4ea:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 4ee:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	b3 d3       	rcall	.+1894   	; 0xc60 <display_character>
 4fa:	2f ef       	ldi	r18, 0xFF	; 255
 4fc:	39 e6       	ldi	r19, 0x69	; 105
 4fe:	88 e1       	ldi	r24, 0x18	; 24
 500:	21 50       	subi	r18, 0x01	; 1
 502:	30 40       	sbci	r19, 0x00	; 0
 504:	80 40       	sbci	r24, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 508:	00 c0       	rjmp	.+0      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 50a:	00 00       	nop
						//FND_4(timearr);
						//_delay_ms(500);
						//FND_4(timeinit);
						//_delay_ms(500);
					}
					if(timeup != 0 & complete == 1){	//sw3을 누르면 탈출, 다음 숫자로 넘김
 50c:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <timeup>
 510:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <timeup+0x1>
 514:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <complete>
 518:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <complete+0x1>
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	45 2b       	or	r20, r21
 520:	09 f4       	brne	.+2      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	21 30       	cpi	r18, 0x01	; 1
 528:	31 05       	cpc	r19, r1
 52a:	09 f0       	breq	.+2      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	89 23       	and	r24, r25
 530:	09 f4       	brne	.+2      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 532:	79 cf       	rjmp	.-270    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 534:	9f ef       	ldi	r25, 0xFF	; 255
 536:	21 ee       	ldi	r18, 0xE1	; 225
 538:	34 e0       	ldi	r19, 0x04	; 4
 53a:	91 50       	subi	r25, 0x01	; 1
 53c:	20 40       	sbci	r18, 0x00	; 0
 53e:	30 40       	sbci	r19, 0x00	; 0
 540:	e1 f7       	brne	.-8      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 542:	00 c0       	rjmp	.+0      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 544:	00 00       	nop
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	91 ee       	ldi	r25, 0xE1	; 225
 54a:	24 e0       	ldi	r18, 0x04	; 4
 54c:	81 50       	subi	r24, 0x01	; 1
 54e:	90 40       	sbci	r25, 0x00	; 0
 550:	20 40       	sbci	r18, 0x00	; 0
 552:	e1 f7       	brne	.-8      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 554:	00 c0       	rjmp	.+0      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 556:	00 00       	nop
						_delay_ms(100);
						break;
					}
				}
				_delay_ms(100);
				settimeth =3;
 558:	83 e0       	ldi	r24, 0x03	; 3
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <settimeth+0x1>
 560:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <settimeth>
				break;
 564:	d7 cd       	rjmp	.-1106   	; 0x114 <main+0x4c>
				
				case 3://1초 단위 설정
				complete = 0;
 566:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <complete+0x1>
 56a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <complete>
				timeup = 0; timedown = 0;
 56e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <timeup+0x1>
 572:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <timeup>
 576:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <timedown+0x1>
 57a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <timedown>
				while(1){
					time = timeup - timedown;
 57e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timeup>
 582:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timeup+0x1>
 586:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <timedown>
 58a:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <timedown+0x1>
 58e:	82 1b       	sub	r24, r18
 590:	93 0b       	sbc	r25, r19
					if(timeup == 0){								//timeup이 0이면 버튼을 누르지 않았으므로 - 표시
 592:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <timeup>
 596:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <timeup+0x1>
 59a:	23 2b       	or	r18, r19
						display_character(settimeth+1, 1);
 59c:	19 f5       	brne	.+70     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 59e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 5a2:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	59 d3       	rcall	.+1714   	; 0xc60 <display_character>
 5ae:	3f ef       	ldi	r19, 0xFF	; 255
 5b0:	89 e6       	ldi	r24, 0x69	; 105
 5b2:	98 e1       	ldi	r25, 0x18	; 24
 5b4:	31 50       	subi	r19, 0x01	; 1
 5b6:	80 40       	sbci	r24, 0x00	; 0
 5b8:	90 40       	sbci	r25, 0x00	; 0
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
						_delay_ms(500);
						display_character(settimeth+1, 0);
 5be:	00 00       	nop
 5c0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 5c4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	48 d3       	rcall	.+1680   	; 0xc60 <display_character>
 5d0:	2f ef       	ldi	r18, 0xFF	; 255
 5d2:	39 e6       	ldi	r19, 0x69	; 105
 5d4:	88 e1       	ldi	r24, 0x18	; 24
 5d6:	21 50       	subi	r18, 0x01	; 1
 5d8:	30 40       	sbci	r19, 0x00	; 0
 5da:	80 40       	sbci	r24, 0x00	; 0
 5dc:	e1 f7       	brne	.-8      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5e0:	00 00       	nop
 5e2:	43 c0       	rjmp	.+134    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
						_delay_ms(500);
					}
					else{							//timeup이 0이 아니면 버튼을 눌렀으므로 화면에 숫자 표시
						if ( time > 9) time = 9;	//10분 단위는 9이상 올라갈 수 없으므로 최댓값 9로 설정
 5e4:	8a 30       	cpi	r24, 0x0A	; 10
 5e6:	91 05       	cpc	r25, r1
 5e8:	14 f4       	brge	.+4      	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
				
				case 3://1초 단위 설정
				complete = 0;
				timeup = 0; timedown = 0;
				while(1){
					time = timeup - timedown;
 5ea:	5c 01       	movw	r10, r24
 5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
						_delay_ms(500);
						display_character(settimeth+1, 0);
						_delay_ms(500);
					}
					else{							//timeup이 0이 아니면 버튼을 눌렀으므로 화면에 숫자 표시
						if ( time > 9) time = 9;	//10분 단위는 9이상 올라갈 수 없으므로 최댓값 9로 설정
 5ee:	0f 2e       	mov	r0, r31
 5f0:	f9 e0       	ldi	r31, 0x09	; 9
 5f2:	af 2e       	mov	r10, r31
 5f4:	b1 2c       	mov	r11, r1
 5f6:	f0 2d       	mov	r31, r0
						if ( time <= 0) time = 0;	//시간은 0 이하 내려갈 수 없으므로 최솟값 0로 설정
 5f8:	1a 14       	cp	r1, r10
 5fa:	1b 04       	cpc	r1, r11
 5fc:	14 f0       	brlt	.+4      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5fe:	a1 2c       	mov	r10, r1
 600:	b1 2c       	mov	r11, r1
						
						timearr[3-settimeth] = numb[time];
 602:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 606:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 60a:	e3 e0       	ldi	r30, 0x03	; 3
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	e8 1b       	sub	r30, r24
 610:	f9 0b       	sbc	r31, r25
 612:	d5 01       	movw	r26, r10
 614:	a0 50       	subi	r26, 0x00	; 0
 616:	bf 4f       	sbci	r27, 0xFF	; 255
 618:	8c 91       	ld	r24, X
 61a:	21 e0       	ldi	r18, 0x01	; 1
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	2c 0f       	add	r18, r28
 620:	3d 1f       	adc	r19, r29
 622:	e2 0f       	add	r30, r18
 624:	f3 1f       	adc	r31, r19
						sec1 = time;
						display_digit(settimeth+1, time);
 626:	80 83       	st	Z, r24
 628:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 62c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 630:	b5 01       	movw	r22, r10
 632:	01 96       	adiw	r24, 0x01	; 1
 634:	fe d2       	rcall	.+1532   	; 0xc32 <display_digit>
 636:	3f ef       	ldi	r19, 0xFF	; 255
 638:	89 e6       	ldi	r24, 0x69	; 105
 63a:	98 e1       	ldi	r25, 0x18	; 24
 63c:	31 50       	subi	r19, 0x01	; 1
 63e:	80 40       	sbci	r24, 0x00	; 0
 640:	90 40       	sbci	r25, 0x00	; 0
 642:	e1 f7       	brne	.-8      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 644:	00 c0       	rjmp	.+0      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
						_delay_ms(500);
						display_character(settimeth+1, 1);
 646:	00 00       	nop
 648:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 64c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 650:	61 e0       	ldi	r22, 0x01	; 1
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	01 96       	adiw	r24, 0x01	; 1
 656:	04 d3       	rcall	.+1544   	; 0xc60 <display_character>
 658:	2f ef       	ldi	r18, 0xFF	; 255
 65a:	39 e6       	ldi	r19, 0x69	; 105
 65c:	88 e1       	ldi	r24, 0x18	; 24
 65e:	21 50       	subi	r18, 0x01	; 1
 660:	30 40       	sbci	r19, 0x00	; 0
 662:	80 40       	sbci	r24, 0x00	; 0
 664:	e1 f7       	brne	.-8      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 666:	00 c0       	rjmp	.+0      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 668:	00 00       	nop
						_delay_ms(500);
					}
					if(timeup != 0 & complete == 1){	//sw3을 누르면 탈출, 다음 숫자로 넘김
 66a:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <timeup>
 66e:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <timeup+0x1>
 672:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <complete>
 676:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <complete+0x1>
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	45 2b       	or	r20, r21
 67e:	09 f4       	brne	.+2      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	21 30       	cpi	r18, 0x01	; 1
 686:	31 05       	cpc	r19, r1
 688:	09 f0       	breq	.+2      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	89 23       	and	r24, r25
 68e:	09 f4       	brne	.+2      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
 690:	76 cf       	rjmp	.-276    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 692:	9f ef       	ldi	r25, 0xFF	; 255
 694:	21 ee       	ldi	r18, 0xE1	; 225
 696:	34 e0       	ldi	r19, 0x04	; 4
 698:	91 50       	subi	r25, 0x01	; 1
 69a:	20 40       	sbci	r18, 0x00	; 0
 69c:	30 40       	sbci	r19, 0x00	; 0
 69e:	e1 f7       	brne	.-8      	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 6a2:	00 00       	nop
 6a4:	8f ef       	ldi	r24, 0xFF	; 255
 6a6:	91 ee       	ldi	r25, 0xE1	; 225
 6a8:	24 e0       	ldi	r18, 0x04	; 4
 6aa:	81 50       	subi	r24, 0x01	; 1
 6ac:	90 40       	sbci	r25, 0x00	; 0
 6ae:	20 40       	sbci	r18, 0x00	; 0
 6b0:	e1 f7       	brne	.-8      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 6b4:	00 00       	nop
						_delay_ms(100);
						break;
					}
				}
				_delay_ms(100);
				mode = 1;
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <mode+0x1>
 6be:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <mode>
				break;
 6c2:	28 cd       	rjmp	.-1456   	; 0x114 <main+0x4c>
			}
			break;//시간 설정 종료
			
			//시간 설정 종료 후 sw1을 누르면 타이머 작동 시작
			case 1:
			opt = 0; reset = 0; timedown = 0;
 6c4:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <opt+0x1>
 6c8:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <opt>
 6cc:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <reset+0x1>
 6d0:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <reset>
 6d4:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <timedown+0x1>
 6d8:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <timedown>
			endtime = min10 * 600 + min1 * 60 + sec10 * 10 + sec1; //끝나는 시간이 cnt와 맞을 때 종료하도록 값 설정
 6dc:	88 e5       	ldi	r24, 0x58	; 88
 6de:	92 e0       	ldi	r25, 0x02	; 2
 6e0:	e8 9e       	mul	r14, r24
 6e2:	a0 01       	movw	r20, r0
 6e4:	e9 9e       	mul	r14, r25
 6e6:	50 0d       	add	r21, r0
 6e8:	f8 9e       	mul	r15, r24
 6ea:	50 0d       	add	r21, r0
 6ec:	11 24       	eor	r1, r1
 6ee:	2c e3       	ldi	r18, 0x3C	; 60
 6f0:	2c 9d       	mul	r18, r12
 6f2:	c0 01       	movw	r24, r0
 6f4:	2d 9d       	mul	r18, r13
 6f6:	90 0d       	add	r25, r0
 6f8:	11 24       	eor	r1, r1
 6fa:	48 0f       	add	r20, r24
 6fc:	59 1f       	adc	r21, r25
 6fe:	98 01       	movw	r18, r16
 700:	22 0f       	add	r18, r18
 702:	33 1f       	adc	r19, r19
 704:	22 0f       	add	r18, r18
 706:	33 1f       	adc	r19, r19
 708:	22 0f       	add	r18, r18
 70a:	33 1f       	adc	r19, r19
 70c:	c8 01       	movw	r24, r16
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	82 0f       	add	r24, r18
 714:	93 1f       	adc	r25, r19
 716:	84 0f       	add	r24, r20
 718:	95 1f       	adc	r25, r21
 71a:	8a 0d       	add	r24, r10
 71c:	9b 1d       	adc	r25, r11
 71e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
 722:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
			
			if (opt == 0) {
 726:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <opt>
 72a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <opt+0x1>
 72e:	89 2b       	or	r24, r25
 730:	21 f0       	breq	.+8      	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
				while(opt == 0){
					FND_4(timearr);
 732:	4a c0       	rjmp	.+148    	; 0x7c8 <__LOCK_REGION_LENGTH__+0x3c8>
 734:	ce 01       	movw	r24, r28
 736:	01 96       	adiw	r24, 0x01	; 1
 738:	c2 d1       	rcall	.+900    	; 0xabe <FND_4>
			case 1:
			opt = 0; reset = 0; timedown = 0;
			endtime = min10 * 600 + min1 * 60 + sec10 * 10 + sec1; //끝나는 시간이 cnt와 맞을 때 종료하도록 값 설정
			
			if (opt == 0) {
				while(opt == 0){
 73a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <opt>
 73e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <opt+0x1>
 742:	89 2b       	or	r24, r25
 744:	b9 f3       	breq	.-18     	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
 746:	40 c0       	rjmp	.+128    	; 0x7c8 <__LOCK_REGION_LENGTH__+0x3c8>
					FND_4(timearr);
				}
			}
			while(cnt != endtime){
				if(cnt > 0x10000) cnt = 0;	//
 748:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <cnt>
 74c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <cnt+0x1>
 750:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <cnt+0x2>
 754:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <cnt+0x3>
 758:	01 97       	sbiw	r24, 0x01	; 1
 75a:	a1 40       	sbci	r26, 0x01	; 1
 75c:	b1 05       	cpc	r27, r1
 75e:	40 f0       	brcs	.+16     	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
 760:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <cnt>
 764:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <cnt+0x1>
 768:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <cnt+0x2>
 76c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <cnt+0x3>
				Display(cnt);
 770:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <cnt>
 774:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <cnt+0x1>
 778:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <cnt+0x2>
 77c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <cnt+0x3>
 780:	b5 d1       	rcall	.+874    	; 0xaec <Display>
				if (timedown != 0){	//reset버튼을 누르면 모두 초기화 후 초기 화면으로 복귀
 782:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <timedown>
 786:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <timedown+0x1>
 78a:	89 2b       	or	r24, r25
 78c:	e9 f0       	breq	.+58     	; 0x7c8 <__LOCK_REGION_LENGTH__+0x3c8>
					opt=0, settimeth=0, reset=0, timeup = 0,timedown = 0, complete = 0; mode = 0; break;
 78e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <opt+0x1>
 792:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <opt>
 796:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <settimeth+0x1>
 79a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <settimeth>
 79e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <reset+0x1>
 7a2:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <reset>
 7a6:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <timeup+0x1>
 7aa:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <timeup>
 7ae:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <timedown+0x1>
 7b2:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <timedown>
 7b6:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <complete+0x1>
 7ba:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <complete>
 7be:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <mode+0x1>
 7c2:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <mode>
 7c6:	16 c0       	rjmp	.+44     	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
			if (opt == 0) {
				while(opt == 0){
					FND_4(timearr);
				}
			}
			while(cnt != endtime){
 7c8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 7cc:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
 7d0:	09 2e       	mov	r0, r25
 7d2:	00 0c       	add	r0, r0
 7d4:	aa 0b       	sbc	r26, r26
 7d6:	bb 0b       	sbc	r27, r27
 7d8:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <cnt>
 7dc:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <cnt+0x1>
 7e0:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <cnt+0x2>
 7e4:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <cnt+0x3>
 7e8:	84 17       	cp	r24, r20
 7ea:	95 07       	cpc	r25, r21
 7ec:	a6 07       	cpc	r26, r22
 7ee:	b7 07       	cpc	r27, r23
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
 7f2:	aa cf       	rjmp	.-172    	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
					opt=0, settimeth=0, reset=0, timeup = 0,timedown = 0, complete = 0; mode = 0; break;
				}
			}
			
			
			if(cnt == endtime){	//시간이 맞으면 LED 점멸, RESET을 누르면
 7f4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 7f8:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
 7fc:	09 2e       	mov	r0, r25
 7fe:	00 0c       	add	r0, r0
 800:	aa 0b       	sbc	r26, r26
 802:	bb 0b       	sbc	r27, r27
 804:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <cnt>
 808:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <cnt+0x1>
 80c:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <cnt+0x2>
 810:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <cnt+0x3>
 814:	84 17       	cp	r24, r20
 816:	95 07       	cpc	r25, r21
 818:	a6 07       	cpc	r26, r22
 81a:	b7 07       	cpc	r27, r23
 81c:	f9 f4       	brne	.+62     	; 0x85c <__LOCK_REGION_LENGTH__+0x45c>
 81e:	18 c0       	rjmp	.+48     	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
				while(reset == 0){	//reset이 눌리면 끝나도록
					PORTA |= 0x80; //Port A의 7번째 비트를 1(HIGH)로 설정
 820:	8b b3       	in	r24, 0x1b	; 27
 822:	80 68       	ori	r24, 0x80	; 128
 824:	8b bb       	out	0x1b, r24	; 27
 826:	8f ef       	ldi	r24, 0xFF	; 255
 828:	99 e6       	ldi	r25, 0x69	; 105
 82a:	28 e1       	ldi	r18, 0x18	; 24
 82c:	81 50       	subi	r24, 0x01	; 1
 82e:	90 40       	sbci	r25, 0x00	; 0
 830:	20 40       	sbci	r18, 0x00	; 0
 832:	e1 f7       	brne	.-8      	; 0x82c <__LOCK_REGION_LENGTH__+0x42c>
 834:	00 c0       	rjmp	.+0      	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
 836:	00 00       	nop
					_delay_ms(500);
					PORTA &= ~0x80; //Port A의 7번째 비트를 0(LOW)로 설정
 838:	8b b3       	in	r24, 0x1b	; 27
 83a:	8f 77       	andi	r24, 0x7F	; 127
 83c:	8b bb       	out	0x1b, r24	; 27
 83e:	3f ef       	ldi	r19, 0xFF	; 255
 840:	89 e6       	ldi	r24, 0x69	; 105
 842:	98 e1       	ldi	r25, 0x18	; 24
 844:	31 50       	subi	r19, 0x01	; 1
 846:	80 40       	sbci	r24, 0x00	; 0
 848:	90 40       	sbci	r25, 0x00	; 0
 84a:	e1 f7       	brne	.-8      	; 0x844 <__LOCK_REGION_LENGTH__+0x444>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <__LOCK_REGION_LENGTH__+0x44e>
 84e:	00 00       	nop
				}
			}
			
			
			if(cnt == endtime){	//시간이 맞으면 LED 점멸, RESET을 누르면
				while(reset == 0){	//reset이 눌리면 끝나도록
 850:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <reset>
 854:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <reset+0x1>
 858:	89 2b       	or	r24, r25
 85a:	11 f3       	breq	.-60     	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
					PORTA &= ~0x80; //Port A의 7번째 비트를 0(LOW)로 설정
					_delay_ms(500);
				}
			}
			
			if (reset != 0){	//reset버튼을 누르면 모두 초기화 후 초기 화면으로 복귀
 85c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <reset>
 860:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <reset+0x1>
 864:	89 2b       	or	r24, r25
 866:	09 f4       	brne	.+2      	; 0x86a <__LOCK_REGION_LENGTH__+0x46a>
 868:	55 cc       	rjmp	.-1878   	; 0x114 <main+0x4c>
				opt=0, settimeth=0, reset=0, timeup = 0,timedown = 0, complete = 0; mode = 0;
 86a:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <opt+0x1>
 86e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <opt>
 872:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <settimeth+0x1>
 876:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <settimeth>
 87a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <reset+0x1>
 87e:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <reset>
 882:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <timeup+0x1>
 886:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <timeup>
 88a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <timedown+0x1>
 88e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <timedown>
 892:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <complete+0x1>
 896:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <complete>
 89a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <mode+0x1>
 89e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <mode>
 8a2:	38 cc       	rjmp	.-1936   	; 0x114 <main+0x4c>

000008a4 <__vector_5>:
		}//switch mode
	}	//main의 while
}	//main끝


ISR(INT4_vect){	//INT4 인터럽트 처리 루틴: sw1 (start, pause, continue 버튼, 기능은 opt이 결정)
 8a4:	1f 92       	push	r1
 8a6:	0f 92       	push	r0
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	0f 92       	push	r0
 8ac:	11 24       	eor	r1, r1
 8ae:	8f 93       	push	r24
 8b0:	9f 93       	push	r25
	timeup++;
 8b2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timeup>
 8b6:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timeup+0x1>
 8ba:	01 96       	adiw	r24, 0x01	; 1
 8bc:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timeup+0x1>
 8c0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timeup>
	opt++;
 8c4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <opt>
 8c8:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <opt+0x1>
 8cc:	01 96       	adiw	r24, 0x01	; 1
 8ce:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <opt+0x1>
 8d2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <opt>
	if (opt >= 2) opt = 0;
 8d6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <opt>
 8da:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <opt+0x1>
 8de:	02 97       	sbiw	r24, 0x02	; 2
 8e0:	24 f0       	brlt	.+8      	; 0x8ea <__vector_5+0x46>
 8e2:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <opt+0x1>
 8e6:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <opt>
}
 8ea:	9f 91       	pop	r25
 8ec:	8f 91       	pop	r24
 8ee:	0f 90       	pop	r0
 8f0:	0f be       	out	0x3f, r0	; 63
 8f2:	0f 90       	pop	r0
 8f4:	1f 90       	pop	r1
 8f6:	18 95       	reti

000008f8 <__vector_6>:

ISR(INT5_vect){	//INT5 인터럽트 처리 루틴: sw2 (시간 설정 버튼)
 8f8:	1f 92       	push	r1
 8fa:	0f 92       	push	r0
 8fc:	0f b6       	in	r0, 0x3f	; 63
 8fe:	0f 92       	push	r0
 900:	11 24       	eor	r1, r1
 902:	8f 93       	push	r24
 904:	9f 93       	push	r25
	timedown++;
 906:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <timedown>
 90a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <timedown+0x1>
 90e:	01 96       	adiw	r24, 0x01	; 1
 910:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timedown+0x1>
 914:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timedown>
}
 918:	9f 91       	pop	r25
 91a:	8f 91       	pop	r24
 91c:	0f 90       	pop	r0
 91e:	0f be       	out	0x3f, r0	; 63
 920:	0f 90       	pop	r0
 922:	1f 90       	pop	r1
 924:	18 95       	reti

00000926 <__vector_7>:

ISR(INT6_vect){	//INT6 인터럽트 처리 루틴: sw3 (reset 버튼)
 926:	1f 92       	push	r1
 928:	0f 92       	push	r0
 92a:	0f b6       	in	r0, 0x3f	; 63
 92c:	0f 92       	push	r0
 92e:	11 24       	eor	r1, r1
 930:	2f 93       	push	r18
 932:	3f 93       	push	r19
 934:	8f 93       	push	r24
 936:	9f 93       	push	r25
	
	cnt = 0; opt = 0; complete = 1; settimeth++; reset = 1;
 938:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <cnt>
 93c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <cnt+0x1>
 940:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <cnt+0x2>
 944:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <cnt+0x3>
 948:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <opt+0x1>
 94c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <opt>
 950:	21 e0       	ldi	r18, 0x01	; 1
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <complete+0x1>
 958:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <complete>
 95c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 960:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 964:	01 96       	adiw	r24, 0x01	; 1
 966:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <settimeth+0x1>
 96a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <settimeth>
 96e:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <reset+0x1>
 972:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <reset>
	if (settimeth > 3) mode = 1; opt = 0;
 976:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <settimeth>
 97a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <settimeth+0x1>
 97e:	04 97       	sbiw	r24, 0x04	; 4
 980:	34 f0       	brlt	.+12     	; 0x98e <__vector_7+0x68>
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <mode+0x1>
 98a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <mode>
 98e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <opt+0x1>
 992:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <opt>
}
 996:	9f 91       	pop	r25
 998:	8f 91       	pop	r24
 99a:	3f 91       	pop	r19
 99c:	2f 91       	pop	r18
 99e:	0f 90       	pop	r0
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	0f 90       	pop	r0
 9a4:	1f 90       	pop	r1
 9a6:	18 95       	reti

000009a8 <__vector_14>:

ISR(TIMER1_OVF_vect){
 9a8:	1f 92       	push	r1
 9aa:	0f 92       	push	r0
 9ac:	0f b6       	in	r0, 0x3f	; 63
 9ae:	0f 92       	push	r0
 9b0:	11 24       	eor	r1, r1
 9b2:	2f 93       	push	r18
 9b4:	3f 93       	push	r19
 9b6:	4f 93       	push	r20
 9b8:	5f 93       	push	r21
 9ba:	8f 93       	push	r24
 9bc:	9f 93       	push	r25
 9be:	af 93       	push	r26
 9c0:	bf 93       	push	r27
	tcnt++;
 9c2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <tcnt>
 9c6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <tcnt+0x1>
 9ca:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <tcnt+0x2>
 9ce:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <tcnt+0x3>
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	a1 1d       	adc	r26, r1
 9d6:	b1 1d       	adc	r27, r1
 9d8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <tcnt>
 9dc:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <tcnt+0x1>
 9e0:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <tcnt+0x2>
 9e4:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <tcnt+0x3>
	if(mode == 1 & opt ==1){
 9e8:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <opt>
 9ec:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <opt+0x1>
 9f0:	91 e0       	ldi	r25, 0x01	; 1
 9f2:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <mode>
 9f6:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <mode+0x1>
 9fa:	41 30       	cpi	r20, 0x01	; 1
 9fc:	51 05       	cpc	r21, r1
 9fe:	09 f0       	breq	.+2      	; 0xa02 <__vector_14+0x5a>
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	21 30       	cpi	r18, 0x01	; 1
 a06:	31 05       	cpc	r19, r1
 a08:	09 f0       	breq	.+2      	; 0xa0c <__vector_14+0x64>
 a0a:	80 e0       	ldi	r24, 0x00	; 0
 a0c:	89 23       	and	r24, r25
 a0e:	d9 f0       	breq	.+54     	; 0xa46 <__vector_14+0x9e>
		//if (tcnt >= 1000){
		cnt++; tcnt = 0;//1초(1000밀리초)가 지나면 cnt값을 증가시켜라
 a10:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <cnt>
 a14:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <cnt+0x1>
 a18:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <cnt+0x2>
 a1c:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <cnt+0x3>
 a20:	01 96       	adiw	r24, 0x01	; 1
 a22:	a1 1d       	adc	r26, r1
 a24:	b1 1d       	adc	r27, r1
 a26:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <cnt>
 a2a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <cnt+0x1>
 a2e:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <cnt+0x2>
 a32:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <cnt+0x3>
 a36:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <tcnt>
 a3a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <tcnt+0x1>
 a3e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <tcnt+0x2>
 a42:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <tcnt+0x3>
		//}
	}
}
 a46:	bf 91       	pop	r27
 a48:	af 91       	pop	r26
 a4a:	9f 91       	pop	r25
 a4c:	8f 91       	pop	r24
 a4e:	5f 91       	pop	r21
 a50:	4f 91       	pop	r20
 a52:	3f 91       	pop	r19
 a54:	2f 91       	pop	r18
 a56:	0f 90       	pop	r0
 a58:	0f be       	out	0x3f, r0	; 63
 a5a:	0f 90       	pop	r0
 a5c:	1f 90       	pop	r1
 a5e:	18 95       	reti

00000a60 <SegPortSet>:

char arr[5];		//세그먼트 이미지 정보를 담을 안전공간
char *PD = &PORTD, *PC = &PORTC;	//포트 변수화

void SegPortSet(char *p1, char *p2){
	PD = p1; PC = p2;
 a60:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <PD+0x1>
 a64:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <PD>
 a68:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <PC+0x1>
 a6c:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <PC>
 a70:	08 95       	ret

00000a72 <seg>:
}
void seg(int sel, uint8_t c){
	*PC |= 0X0F;
 a72:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <PC>
 a76:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <PC+0x1>
 a7a:	20 81       	ld	r18, Z
 a7c:	2f 60       	ori	r18, 0x0F	; 15
 a7e:	20 83       	st	Z, r18
	*PC &= ~(1 << (3-sel));
 a80:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <PC>
 a84:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <PC+0x1>
 a88:	23 e0       	ldi	r18, 0x03	; 3
 a8a:	30 e0       	ldi	r19, 0x00	; 0
 a8c:	28 1b       	sub	r18, r24
 a8e:	39 0b       	sbc	r19, r25
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	02 c0       	rjmp	.+4      	; 0xa9a <seg+0x28>
 a96:	88 0f       	add	r24, r24
 a98:	99 1f       	adc	r25, r25
 a9a:	2a 95       	dec	r18
 a9c:	e2 f7       	brpl	.-8      	; 0xa96 <seg+0x24>
 a9e:	80 95       	com	r24
 aa0:	90 81       	ld	r25, Z
 aa2:	89 23       	and	r24, r25
 aa4:	80 83       	st	Z, r24
	*PD = c;	//숫자 데이터 출력
 aa6:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <PD>
 aaa:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <PD+0x1>
 aae:	60 83       	st	Z, r22
 ab0:	8f e3       	ldi	r24, 0x3F	; 63
 ab2:	9f e1       	ldi	r25, 0x1F	; 31
 ab4:	01 97       	sbiw	r24, 0x01	; 1
 ab6:	f1 f7       	brne	.-4      	; 0xab4 <seg+0x42>
 ab8:	00 c0       	rjmp	.+0      	; 0xaba <seg+0x48>
 aba:	00 00       	nop
 abc:	08 95       	ret

00000abe <FND_4>:
	_delay_ms(2);
}


void FND_4(char *inf){	//segment Image 배열
 abe:	0f 93       	push	r16
 ac0:	1f 93       	push	r17
 ac2:	cf 93       	push	r28
 ac4:	df 93       	push	r29
 ac6:	8c 01       	movw	r16, r24
	for (int i = 0; i < 4; i++){
 ac8:	c0 e0       	ldi	r28, 0x00	; 0
 aca:	d0 e0       	ldi	r29, 0x00	; 0
 acc:	07 c0       	rjmp	.+14     	; 0xadc <FND_4+0x1e>
		seg(i, *(inf+i));
 ace:	f8 01       	movw	r30, r16
 ad0:	ec 0f       	add	r30, r28
 ad2:	fd 1f       	adc	r31, r29
 ad4:	60 81       	ld	r22, Z
 ad6:	ce 01       	movw	r24, r28
 ad8:	cc df       	rcall	.-104    	; 0xa72 <seg>
	_delay_ms(2);
}


void FND_4(char *inf){	//segment Image 배열
	for (int i = 0; i < 4; i++){
 ada:	21 96       	adiw	r28, 0x01	; 1
 adc:	c4 30       	cpi	r28, 0x04	; 4
 ade:	d1 05       	cpc	r29, r1
 ae0:	b4 f3       	brlt	.-20     	; 0xace <FND_4+0x10>
		seg(i, *(inf+i));

	}
}
 ae2:	df 91       	pop	r29
 ae4:	cf 91       	pop	r28
 ae6:	1f 91       	pop	r17
 ae8:	0f 91       	pop	r16
 aea:	08 95       	ret

00000aec <Display>:

//16진수 segment image 배열
char* Display(unsigned long num){	//10진 정수를 입력받아 16진수 문자열로 변환 ex)65535 ==> 0xffff, 56506=>0xBCDA
 aec:	4f 92       	push	r4
 aee:	5f 92       	push	r5
 af0:	6f 92       	push	r6
 af2:	7f 92       	push	r7
 af4:	8f 92       	push	r8
 af6:	9f 92       	push	r9
 af8:	af 92       	push	r10
 afa:	bf 92       	push	r11
 afc:	cf 92       	push	r12
 afe:	df 92       	push	r13
 b00:	ef 92       	push	r14
 b02:	ff 92       	push	r15
 b04:	cf 93       	push	r28
 b06:	df 93       	push	r29
 b08:	cd b7       	in	r28, 0x3d	; 61
 b0a:	de b7       	in	r29, 0x3e	; 62
 b0c:	28 97       	sbiw	r28, 0x08	; 8
 b0e:	0f b6       	in	r0, 0x3f	; 63
 b10:	f8 94       	cli
 b12:	de bf       	out	0x3e, r29	; 62
 b14:	0f be       	out	0x3f, r0	; 63
 b16:	cd bf       	out	0x3d, r28	; 61
 b18:	6b 01       	movw	r12, r22
 b1a:	7c 01       	movw	r14, r24
	int n1 = num % 10;			//A(10): 문자가 아닌 숫자
 b1c:	0f 2e       	mov	r0, r31
 b1e:	fa e0       	ldi	r31, 0x0A	; 10
 b20:	8f 2e       	mov	r8, r31
 b22:	91 2c       	mov	r9, r1
 b24:	a1 2c       	mov	r10, r1
 b26:	b1 2c       	mov	r11, r1
 b28:	f0 2d       	mov	r31, r0
 b2a:	a5 01       	movw	r20, r10
 b2c:	94 01       	movw	r18, r8
 b2e:	af d0       	rcall	.+350    	; 0xc8e <__udivmodsi4>
 b30:	69 83       	std	Y+1, r22	; 0x01
 b32:	7a 83       	std	Y+2, r23	; 0x02
 b34:	8b 83       	std	Y+3, r24	; 0x03
 b36:	9c 83       	std	Y+4, r25	; 0x04
	int n2 = (num / 10) % 6;	//B(11)
 b38:	0f 2e       	mov	r0, r31
 b3a:	f6 e0       	ldi	r31, 0x06	; 6
 b3c:	4f 2e       	mov	r4, r31
 b3e:	51 2c       	mov	r5, r1
 b40:	61 2c       	mov	r6, r1
 b42:	71 2c       	mov	r7, r1
 b44:	f0 2d       	mov	r31, r0
 b46:	ca 01       	movw	r24, r20
 b48:	b9 01       	movw	r22, r18
 b4a:	a3 01       	movw	r20, r6
 b4c:	92 01       	movw	r18, r4
 b4e:	9f d0       	rcall	.+318    	; 0xc8e <__udivmodsi4>
 b50:	6d 83       	std	Y+5, r22	; 0x05
 b52:	7e 83       	std	Y+6, r23	; 0x06
 b54:	8f 83       	std	Y+7, r24	; 0x07
 b56:	98 87       	std	Y+8, r25	; 0x08
	int n3 = (num / 60) % 10;	//C(12)
 b58:	c7 01       	movw	r24, r14
 b5a:	b6 01       	movw	r22, r12
 b5c:	2c e3       	ldi	r18, 0x3C	; 60
 b5e:	30 e0       	ldi	r19, 0x00	; 0
 b60:	40 e0       	ldi	r20, 0x00	; 0
 b62:	50 e0       	ldi	r21, 0x00	; 0
 b64:	94 d0       	rcall	.+296    	; 0xc8e <__udivmodsi4>
 b66:	ca 01       	movw	r24, r20
 b68:	b9 01       	movw	r22, r18
 b6a:	a5 01       	movw	r20, r10
 b6c:	94 01       	movw	r18, r8
 b6e:	8f d0       	rcall	.+286    	; 0xc8e <__udivmodsi4>
 b70:	4b 01       	movw	r8, r22
 b72:	5c 01       	movw	r10, r24
	int n4 = (num / 600) % 6;		//D(13)
 b74:	c7 01       	movw	r24, r14
 b76:	b6 01       	movw	r22, r12
 b78:	28 e5       	ldi	r18, 0x58	; 88
 b7a:	32 e0       	ldi	r19, 0x02	; 2
 b7c:	40 e0       	ldi	r20, 0x00	; 0
 b7e:	50 e0       	ldi	r21, 0x00	; 0
 b80:	86 d0       	rcall	.+268    	; 0xc8e <__udivmodsi4>
 b82:	ca 01       	movw	r24, r20
 b84:	b9 01       	movw	r22, r18
 b86:	a3 01       	movw	r20, r6
 b88:	92 01       	movw	r18, r4
 b8a:	81 d0       	rcall	.+258    	; 0xc8e <__udivmodsi4>
	
	arr[0] = digit[n1]; arr[1] = digit[n2]; arr[2] = digit[n3] + 0x80; arr[3] = digit[n4];
 b8c:	e9 81       	ldd	r30, Y+1	; 0x01
 b8e:	fa 81       	ldd	r31, Y+2	; 0x02
 b90:	ea 5e       	subi	r30, 0xEA	; 234
 b92:	fe 4f       	sbci	r31, 0xFE	; 254
 b94:	20 81       	ld	r18, Z
 b96:	ee e3       	ldi	r30, 0x3E	; 62
 b98:	f1 e0       	ldi	r31, 0x01	; 1
 b9a:	20 83       	st	Z, r18
 b9c:	ad 81       	ldd	r26, Y+5	; 0x05
 b9e:	be 81       	ldd	r27, Y+6	; 0x06
 ba0:	aa 5e       	subi	r26, 0xEA	; 234
 ba2:	be 4f       	sbci	r27, 0xFE	; 254
 ba4:	2c 91       	ld	r18, X
 ba6:	21 83       	std	Z+1, r18	; 0x01
 ba8:	d4 01       	movw	r26, r8
 baa:	aa 5e       	subi	r26, 0xEA	; 234
 bac:	be 4f       	sbci	r27, 0xFE	; 254
 bae:	2c 91       	ld	r18, X
 bb0:	20 58       	subi	r18, 0x80	; 128
 bb2:	22 83       	std	Z+2, r18	; 0x02
 bb4:	db 01       	movw	r26, r22
 bb6:	aa 5e       	subi	r26, 0xEA	; 234
 bb8:	be 4f       	sbci	r27, 0xFE	; 254
 bba:	8c 91       	ld	r24, X
 bbc:	83 83       	std	Z+3, r24	; 0x03
	
	if ( num< 10 ){
 bbe:	8a e0       	ldi	r24, 0x0A	; 10
 bc0:	c8 16       	cp	r12, r24
 bc2:	d1 04       	cpc	r13, r1
 bc4:	e1 04       	cpc	r14, r1
 bc6:	f1 04       	cpc	r15, r1
 bc8:	28 f4       	brcc	.+10     	; 0xbd4 <Display+0xe8>
		arr[3] = 0; arr[1] = 0; arr[2] = 0x80;
 bca:	13 82       	std	Z+3, r1	; 0x03
 bcc:	11 82       	std	Z+1, r1	; 0x01
 bce:	80 e8       	ldi	r24, 0x80	; 128
 bd0:	82 83       	std	Z+2, r24	; 0x02
 bd2:	15 c0       	rjmp	.+42     	; 0xbfe <Display+0x112>
	}
	else if ( num<60 ){
 bd4:	8c e3       	ldi	r24, 0x3C	; 60
 bd6:	c8 16       	cp	r12, r24
 bd8:	d1 04       	cpc	r13, r1
 bda:	e1 04       	cpc	r14, r1
 bdc:	f1 04       	cpc	r15, r1
 bde:	30 f4       	brcc	.+12     	; 0xbec <Display+0x100>
		arr[2] = 0x80; arr[3] = 0;
 be0:	ee e3       	ldi	r30, 0x3E	; 62
 be2:	f1 e0       	ldi	r31, 0x01	; 1
 be4:	80 e8       	ldi	r24, 0x80	; 128
 be6:	82 83       	std	Z+2, r24	; 0x02
 be8:	13 82       	std	Z+3, r1	; 0x03
 bea:	09 c0       	rjmp	.+18     	; 0xbfe <Display+0x112>
	}
	else if ( num<600 ){
 bec:	88 e5       	ldi	r24, 0x58	; 88
 bee:	c8 16       	cp	r12, r24
 bf0:	82 e0       	ldi	r24, 0x02	; 2
 bf2:	d8 06       	cpc	r13, r24
 bf4:	e1 04       	cpc	r14, r1
 bf6:	f1 04       	cpc	r15, r1
		arr[3] = 0;
 bf8:	10 f4       	brcc	.+4      	; 0xbfe <Display+0x112>
 bfa:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <arr+0x3>
	}
	
	FND_4(arr);
 bfe:	8e e3       	ldi	r24, 0x3E	; 62
 c00:	91 e0       	ldi	r25, 0x01	; 1
 c02:	5d df       	rcall	.-326    	; 0xabe <FND_4>
	return arr;
}
 c04:	8e e3       	ldi	r24, 0x3E	; 62
 c06:	91 e0       	ldi	r25, 0x01	; 1
 c08:	28 96       	adiw	r28, 0x08	; 8
 c0a:	0f b6       	in	r0, 0x3f	; 63
 c0c:	f8 94       	cli
 c0e:	de bf       	out	0x3e, r29	; 62
 c10:	0f be       	out	0x3f, r0	; 63
 c12:	cd bf       	out	0x3d, r28	; 61
 c14:	df 91       	pop	r29
 c16:	cf 91       	pop	r28
 c18:	ff 90       	pop	r15
 c1a:	ef 90       	pop	r14
 c1c:	df 90       	pop	r13
 c1e:	cf 90       	pop	r12
 c20:	bf 90       	pop	r11
 c22:	af 90       	pop	r10
 c24:	9f 90       	pop	r9
 c26:	8f 90       	pop	r8
 c28:	7f 90       	pop	r7
 c2a:	6f 90       	pop	r6
 c2c:	5f 90       	pop	r5
 c2e:	4f 90       	pop	r4
 c30:	08 95       	ret

00000c32 <display_digit>:

void display_digit(int position, int number){
	PORTC |= 0x0F;
 c32:	25 b3       	in	r18, 0x15	; 21
 c34:	2f 60       	ori	r18, 0x0F	; 15
 c36:	25 bb       	out	0x15, r18	; 21
	PORTC &= ~(1 << (position - 1));
 c38:	45 b3       	in	r20, 0x15	; 21
 c3a:	01 97       	sbiw	r24, 0x01	; 1
 c3c:	21 e0       	ldi	r18, 0x01	; 1
 c3e:	30 e0       	ldi	r19, 0x00	; 0
 c40:	f9 01       	movw	r30, r18
 c42:	02 c0       	rjmp	.+4      	; 0xc48 <display_digit+0x16>
 c44:	ee 0f       	add	r30, r30
 c46:	ff 1f       	adc	r31, r31
 c48:	8a 95       	dec	r24
 c4a:	e2 f7       	brpl	.-8      	; 0xc44 <display_digit+0x12>
 c4c:	cf 01       	movw	r24, r30
 c4e:	80 95       	com	r24
 c50:	84 23       	and	r24, r20
 c52:	85 bb       	out	0x15, r24	; 21
	
	PORTD = digit[number];
 c54:	fb 01       	movw	r30, r22
 c56:	ea 5e       	subi	r30, 0xEA	; 234
 c58:	fe 4f       	sbci	r31, 0xFE	; 254
 c5a:	80 81       	ld	r24, Z
 c5c:	82 bb       	out	0x12, r24	; 18
 c5e:	08 95       	ret

00000c60 <display_character>:
}
void display_character(int position, int number){
	PORTC |= 0x0F;
 c60:	25 b3       	in	r18, 0x15	; 21
 c62:	2f 60       	ori	r18, 0x0F	; 15
 c64:	25 bb       	out	0x15, r18	; 21
	PORTC &= ~(1 << (position - 1));
 c66:	45 b3       	in	r20, 0x15	; 21
 c68:	01 97       	sbiw	r24, 0x01	; 1
 c6a:	21 e0       	ldi	r18, 0x01	; 1
 c6c:	30 e0       	ldi	r19, 0x00	; 0
 c6e:	f9 01       	movw	r30, r18
 c70:	02 c0       	rjmp	.+4      	; 0xc76 <display_character+0x16>
 c72:	ee 0f       	add	r30, r30
 c74:	ff 1f       	adc	r31, r31
 c76:	8a 95       	dec	r24
 c78:	e2 f7       	brpl	.-8      	; 0xc72 <display_character+0x12>
 c7a:	cf 01       	movw	r24, r30
 c7c:	80 95       	com	r24
 c7e:	84 23       	and	r24, r20
 c80:	85 bb       	out	0x15, r24	; 21
	
	PORTD = character[number];
 c82:	fb 01       	movw	r30, r22
 c84:	ec 5e       	subi	r30, 0xEC	; 236
 c86:	fe 4f       	sbci	r31, 0xFE	; 254
 c88:	80 81       	ld	r24, Z
 c8a:	82 bb       	out	0x12, r24	; 18
 c8c:	08 95       	ret

00000c8e <__udivmodsi4>:
 c8e:	a1 e2       	ldi	r26, 0x21	; 33
 c90:	1a 2e       	mov	r1, r26
 c92:	aa 1b       	sub	r26, r26
 c94:	bb 1b       	sub	r27, r27
 c96:	fd 01       	movw	r30, r26
 c98:	0d c0       	rjmp	.+26     	; 0xcb4 <__udivmodsi4_ep>

00000c9a <__udivmodsi4_loop>:
 c9a:	aa 1f       	adc	r26, r26
 c9c:	bb 1f       	adc	r27, r27
 c9e:	ee 1f       	adc	r30, r30
 ca0:	ff 1f       	adc	r31, r31
 ca2:	a2 17       	cp	r26, r18
 ca4:	b3 07       	cpc	r27, r19
 ca6:	e4 07       	cpc	r30, r20
 ca8:	f5 07       	cpc	r31, r21
 caa:	20 f0       	brcs	.+8      	; 0xcb4 <__udivmodsi4_ep>
 cac:	a2 1b       	sub	r26, r18
 cae:	b3 0b       	sbc	r27, r19
 cb0:	e4 0b       	sbc	r30, r20
 cb2:	f5 0b       	sbc	r31, r21

00000cb4 <__udivmodsi4_ep>:
 cb4:	66 1f       	adc	r22, r22
 cb6:	77 1f       	adc	r23, r23
 cb8:	88 1f       	adc	r24, r24
 cba:	99 1f       	adc	r25, r25
 cbc:	1a 94       	dec	r1
 cbe:	69 f7       	brne	.-38     	; 0xc9a <__udivmodsi4_loop>
 cc0:	60 95       	com	r22
 cc2:	70 95       	com	r23
 cc4:	80 95       	com	r24
 cc6:	90 95       	com	r25
 cc8:	9b 01       	movw	r18, r22
 cca:	ac 01       	movw	r20, r24
 ccc:	bd 01       	movw	r22, r26
 cce:	cf 01       	movw	r24, r30
 cd0:	08 95       	ret

00000cd2 <_exit>:
 cd2:	f8 94       	cli

00000cd4 <__stop_program>:
 cd4:	ff cf       	rjmp	.-2      	; 0xcd4 <__stop_program>
